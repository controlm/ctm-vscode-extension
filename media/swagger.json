{
  "info": {
    "version": "9.20.250",
    "title": "Control-M Services",
    "description": "Provides access to BMC Control-M Services",
    "contact": {
      "email": "customer_support@bmc.com"
    },
    "license": {
      "name": "BMC License",
      "url": "./license.html"
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "description": "Token should be received using /login request, and then passed in the Authenticate header with all requests.",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "deploy",
      "description": "Submit definitions to Control-M."
    },
    {
      "name": "session",
      "description": "Create and destroy user sessions."
    },
    {
      "name": "archive",
      "description": "Control-M Archiving operations."
    },
    {
      "name": "build",
      "description": "Compile definitions to verify they are valid for Control-M."
    },
    {
      "name": "provision",
      "description": "Install a BigData agent on the current account."
    },
    {
      "name": "reporting",
      "description": "Generate Control-M reports."
    },
    {
      "name": "run",
      "description": "Run and track Control-M jobs."
    },
    {
      "name": "config",
      "description": "Manage Control-M configuration and environment."
    }
  ],
  "paths": {
    "/deploy": {
      "post": {
        "summary": "Deploy definitions file",
        "description": "Deploy the provided definition file (JSON, XML or zip) to Control-M",
        "x-action": "!",
        "tags": [
          "deploy"
        ],
        "operationId": "deployFile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "definitionsFile",
            "in": "formData",
            "description": "A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files.",
            "required": true,
            "type": "file"
          },
          {
            "name": "deployDescriptorFile",
            "in": "formData",
            "description": "Deploy Descriptor JSON file.",
            "required": false,
            "type": "file"
          },
          {
            "name": "additionalConfiguration",
            "in": "formData",
            "required": false,
            "type": "file",
            "x-hidden": true,
            "description": "additionalConfiguration to enable skip testing for local connection profile"
          }
        ],
        "responses": {
          "200": {
            "description": "File deploy results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentFileResults"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/ai/jobtype": {
      "post": {
        "summary": "Deploy of Application Integrator job type.",
        "description": "Deploy an existing Application Integrator job type to agent in order to allow it to run",
        "x-action": "!",
        "x-min-em-version": "9.0.19.100",
        "tags": [
          "deploy"
        ],
        "operationId": "deployAiJobtype",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ctm",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobTypeId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Response of AI server",
            "schema": {
              "$ref": "#/definitions/AiDeployResponse"
            }
          },
          "400": {
            "description": "Ai server error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/ai/jobtypes": {
      "get": {
        "summary": "Get Application Integrator job types",
        "description": "Get deployed Application Integrator job types that match the requested search criteria.",
        "x-additional-description": "Search fields are jobTypeName and jobTypeId. Wildcard * is supported",
        "x-additional-usage": "-s <search query>",
        "x-min-em-version": "9.0.19.100",
        "tags": [
          "deploy"
        ],
        "operationId": "getDeployedAiJobtypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobTypeName",
            "in": "query",
            "description": "Job type display name ( or partial name ) for query. It accepts * as wildcard.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "jobTypeId",
            "in": "query",
            "description": "Job type id ( or partial name ) for query. It accepts * as wildcard.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of deployed jobtypes (json format)",
            "schema": {
              "$ref": "#/definitions/AiJobtypeList"
            }
          },
          "400": {
            "description": "Ai server error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofiles": {
      "get": {
        "summary": "Get local deployed connection profiles",
        "description": "Get currently local deployed connection profiles according to the search query as JSON.",
        "x-additional-description": "Search fields are ctm, server, agent, type",
        "x-additional-usage": "-s <search query>",
        "x-search-required": true,
        "tags": [
          "deploy"
        ],
        "operationId": "getDeployedConnectionProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ctm",
            "in": "query",
            "description": "The name of the Control-M in which the connection profile is deployed on",
            "required": false,
            "type": "string",
            "x-hidden": true,
            "deprecated": true
          },
          {
            "name": "server",
            "in": "query",
            "description": "The name of the Control-M in which the connection profile is deployed on",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "agent",
            "in": "query",
            "description": "The name of the agent the connection profile is deployed on",
            "required": true,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of connection profile such as Database, FileTransfer, Hadoop, Informatica, SAP.",
            "required": true,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Getting local deployed connection profiles",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Local connection profiles not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofiles/local": {
      "get": {
        "summary": "Get local deployed connection profiles",
        "description": "Get currently local deployed connection profiles according to the search query as JSON.",
        "x-additional-description": "Search fields are ctm, agent, type",
        "x-additional-usage": "-s <search query>",
        "x-search-required": true,
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "deploy"
        ],
        "operationId": "getLocalConnectionProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ctm",
            "in": "query",
            "description": "The name of the Control-M in which the connection profile is deployed on",
            "required": false,
            "type": "string",
            "x-hidden": true,
            "deprecated": true
          },
          {
            "name": "server",
            "in": "query",
            "description": "The name of the Control-M in which the connection profile is deployed on",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "agent",
            "in": "query",
            "description": "The name of the agent the connection profile is deployed on",
            "required": true,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of connection profile such as Database, FileTransfer, Hadoop, Informatica, SAP.",
            "required": true,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Getting local deployed connection profiles",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Local connection profiles not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofiles/centralized": {
      "get": {
        "summary": "Get centralized deployed connection profile",
        "description": "Get currently centralized deployed connection profiles according to the search query as JSON.",
        "x-additional-description": "Search fields are type and name",
        "x-additional-usage": "-s <search query>",
        "x-search-required": true,
        "x-min-em-version": "9.0.20.000",
        "tags": [
          "deploy"
        ],
        "operationId": "getSharedConnectionProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The type of connection profile such as Database, FileTransfer, Hadoop, Informatica, SAP. Use * to get all types",
            "required": true,
            "type": "string",
            "x-hidden": true,
            "default": "*"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of centralized connection profile. Supports for *, ?, and comma. By default is *",
            "required": false,
            "type": "string",
            "x-hidden": true,
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "Getting centralized deployed connection profiles",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "centralized connection profiles not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofiles/centralized/status": {
      "get": {
        "summary": "Get deployed connection profiles status",
        "description": "Get currently deployed connection profiles status according to the search query as JSON.",
        "x-additional-description": "Search fields are name, type, limit",
        "x-additional-usage": "-s <search query>",
        "x-search-required": true,
        "x-min-em-version": "9.0.20.000",
        "tags": [
          "deploy"
        ],
        "operationId": "getDeployedConnectionProfilesStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "number to limit the returned connection profiles. If missed - get all",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "description": "conn profile name (support *, ?, and comma, default is * for all).",
            "required": false,
            "default": "*",
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "type",
            "in": "query",
            "description": "conn profile type (default is * for accounts from all CMs).",
            "required": false,
            "type": "string",
            "default": "*",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Getting deployed connection profiles status",
            "schema": {
              "$ref": "#/definitions/ConnectionProfilesStatusResult"
            }
          },
          "206": {
            "description": "Result with the requested statuses, number of connection profiles exceed the limit.",
            "schema": {
              "$ref": "#/definitions/ConnectionProfilesStatusResult"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Connection profiles status not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofile/centralized/deploymentstatus/{type}/{name}": {
      "get": {
        "summary": "Get deployed connection profiles deployment status",
        "description": "Get currently deployed connection profiles deployment status according to the search query as JSON.",
        "x-min-em-version": "9.0.20.000",
        "x-action": "deploymentstatus",
        "tags": [
          "deploy"
        ],
        "operationId": "getConnectionProfilesDeploymentStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The type of connection profile such as Database, FileTransfer, Hadoop, Informatica, SAP.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the Connection Profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Getting connection profiles deployment status",
            "schema": {
              "$ref": "#/definitions/ConnectionProfilesDeploymentStatusResult"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Connection profiles deployment status not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofile/{server}/{agent}/{type}/{name}": {
      "delete": {
        "summary": "Delete Local Connection Profile",
        "description": "Delete Local Connection Profile.",
        "tags": [
          "deploy"
        ],
        "operationId": "deleteConnectionProfile",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The name of the Control-M in which the connection profile is deployed.",
            "required": true,
            "type": "string",
            "deprecated": true
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The name of the agent the connection profile is deployed on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of connection profile to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the Connection Profile",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Connection Profile was successfully deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Connection Profile not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofile/local/{server}/{agent}/{type}/{name}": {
      "delete": {
        "summary": "Delete Local Connection Profile",
        "description": "Delete Local Connection Profile",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "deploy"
        ],
        "operationId": "deleteLocalConnectionProfile",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The name of the Control-M in which the connection profile is deployed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The name of the agent the connection profile is deployed on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of connection profile to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the Connection Profile",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Connection Profile was successfully deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Connection Profile not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofile/centralized/{type}/{name}": {
      "delete": {
        "summary": "Delete centralized Connection Profile",
        "description": "Delete centralized Connection Profile",
        "x-min-em-version": "9.0.20.000",
        "tags": [
          "deploy"
        ],
        "operationId": "deleteSharedConnectionProfile",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The type of connection profile to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the Connection Profile",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Connection Profile was successfully deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Connection Profile not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/connectionprofile/test": {
      "post": {
        "summary": "Test connection profile on agent",
        "description": "Test connection profile on agent",
        "x-action": "test",
        "x-min-em-version": "9.0.20.000",
        "tags": [
          "deploy"
        ],
        "operationId": "testConnectionProfile",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "ctm",
            "in": "query",
            "required": false,
            "type": "string",
            "deprecated": true
          },
          {
            "name": "agent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "definitionsFile",
            "in": "formData",
            "description": "A file that contains definitions of the connection profile to be tested",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Connection Profile Successful validation",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Connection Profile not found or not valid",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/session/login": {
      "post": {
        "summary": "login user to Control-M",
        "description": "Authenticate the user with the specified password and return a token that can be used later in subsequent requests to access Control-M.",
        "security": [],
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "session"
        ],
        "operationId": "doLogin",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "description": "The credentials to use for login.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginCredentials"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/LoginResult"
            }
          },
          "401": {
            "description": "Login failed",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/session/logout": {
      "post": {
        "summary": "logout user from Control-M",
        "description": "Disconnects the user session specified by the request authentication token, and removes it from the server memory.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "session"
        ],
        "operationId": "doLogout",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful logout",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/session/user/password/update": {
      "post": {
        "summary": "Change my password",
        "description": "Change my password",
        "x-action": "update",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "session"
        ],
        "operationId": "updateMyPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PasswordsObject",
            "in": "body",
            "description": "The new password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordsObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Passwored changed successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors in password change details",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/archive/search": {
      "get": {
        "summary": "Search jobs in Archive",
        "description": "Get all the Control-M Archiving jobs that match the search criterias",
        "x-additional-description": "Search fields are jobname, jobid, ctm, folder, host, application, subApplication, status, orderId, orderDateFrom, orderDateTo, fromTime, toTime, folderLibrary, memName, memLibrary, hostGroup, runAs, logContains, outputContains and numberOfRuns.",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "archive"
        ],
        "operationId": "searchJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "description": "maximum jobs to fetch (default 500).",
            "in": "query",
            "type": "integer",
            "maximum": 1000,
            "minimum": 1,
            "default": 500,
            "required": false
          },
          {
            "name": "jobname",
            "description": "The name of the job.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "jobid",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "ctm",
            "description": "The name of the Control-M server in which the job was ordered from.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "description": "The name of the Control-M server in which the job was ordered from.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "folder",
            "description": "The name of the parent folder.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "fromTime",
            "description": "Job execution start date. Date format - YYYY-MM-DD.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "toTime",
            "description": "Job execution end date. Date format - YYYY-MM-DD.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "logContains",
            "description": "Job log must contain the given phrase.",
            "in": "query",
            "required": false,
            "x-hidden": true,
            "type": "string"
          },
          {
            "name": "outputContains",
            "description": "Job output must contain the given phrase.",
            "in": "query",
            "required": false,
            "x-hidden": true,
            "type": "string"
          },
          {
            "name": "application",
            "description": "The name of the application the jobs belong to.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "subApplication",
            "description": "The name of the sub-application the jobs belong to.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "library",
            "description": "The job's library name.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "memName",
            "description": "Member name.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "memLibrary",
            "description": "Member's library.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "host",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "hostGroup",
            "description": "Job's host group.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "runAs",
            "description": "Runs as (username on agent machine).",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "orderId",
            "description": "Job's order id.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "status",
            "enum": [
              "All",
              "Ended OK",
              "Ended Not OK"
            ],
            "description": "The job's end status.",
            "default": "All",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "orderDateFrom",
            "description": "Indicating a date by which will look for jobs that their order date started afterwards. Date format - YYYY-MM-DD.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "orderDateTo",
            "description": "Indicating a date by which will look for jobs that their order date ended before. Date format - YYYY-MM-DD.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "numberOfRuns",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all archive jobs matched to search parameters",
            "schema": {
              "$ref": "#/definitions/ArchiveJobsList"
            }
          },
          "206": {
            "description": "Retrieve all archive jobs matched to search parameters, number of jobs exceed the limit",
            "schema": {
              "$ref": "#/definitions/ArchiveJobsList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/archive/{jobId}/log": {
      "get": {
        "summary": "Get job log",
        "description": "Get job log by unique job key",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "archive"
        ],
        "operationId": "getArchiveJobLog",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "runNo",
            "in": "query",
            "description": "The execution number in case of multiple executions",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested job log",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to get log from archive server",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Job's log can not be found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/archive/{jobId}/output": {
      "get": {
        "summary": "Get job output",
        "description": "Get job output by unique job key",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "archive"
        ],
        "operationId": "getArchiveJobOutput",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "runNo",
            "in": "query",
            "description": "The execution number in case of multiple executions",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested job output",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to get log from archive server",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Job's output can not be found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/build": {
      "post": {
        "summary": "Compile definitions file to check its validity",
        "description": "Compile the provided definition file (JSON or zip) to verify it is valid for Control-M.",
        "x-action": "!",
        "tags": [
          "build"
        ],
        "operationId": "buildFile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "definitionsFile",
            "in": "formData",
            "description": "A file that contains definitions to be compiled. Can be either a JSON definition file, or a zip file that contains multiple JSON definition files.",
            "required": true,
            "type": "file"
          },
          {
            "name": "deployDescriptorFile",
            "in": "formData",
            "description": "Deploy Descriptor JSON file.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "File compiled successfully. No errors were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentFileResults"
              }
            }
          },
          "400": {
            "description": "Errors were found in input file",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/jobtype": {
      "post": {
        "summary": "Deploy jobtype",
        "description": "Deploy the provided jobtype to AI server, EM server, and Agent.",
        "x-action": "!",
        "x-min-em-version": "9.0.20.100",
        "tags": [
          "deploy"
        ],
        "operationId": "deployJobtypeFile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "x-additional-description": "params are server and agent",
        "x-additional-usage": [
          "-f <payload file>"
        ],
        "parameters": [
          {
            "name": "definitionsFile",
            "in": "formData",
            "description": "A .ctmai file that contains definitions of jobtype to be deployed to the server.",
            "required": true,
            "type": "file"
          },
          {
            "name": "payloadFile",
            "in": "formData",
            "description": "A JSON file that contains specifications of an agent.",
            "required": false,
            "type": "file",
            "x-hidden": true
          },
          {
            "name": "agent",
            "in": "query",
            "type": "string",
            "hidden": true
          },
          {
            "name": "server",
            "in": "query",
            "type": "string",
            "hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Jobtype deployed successfully",
            "schema": {
              "$ref": "#/definitions/DeployJobtypeResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/transform": {
      "post": {
        "summary": "Transform a definitions file",
        "description": "Transform the provided definitions file (JSON) according to the provided Deploy Descriptor file (JSON).",
        "x-action": "!",
        "tags": [
          "deploy"
        ],
        "operationId": "transformFile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "definitionsFile",
            "in": "formData",
            "description": "A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files.",
            "required": true,
            "type": "file"
          },
          {
            "name": "deployDescriptorFile",
            "in": "formData",
            "description": "Deploy Descriptor JSON file.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Transformed file in Json format",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "bad request, invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/jobs": {
      "get": {
        "summary": "Get deployed jobs that match the search criteria.",
        "description": "Get definition of jobs and folders (in the desired format - JSON or XML) that match the requested search criteria.",
        "tags": [
          "deploy"
        ],
        "operationId": "getDeployedFoldersNew",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search fields are ctm and folder",
        "x-additional-usage": "-s <search query>",
        "x-force-unordered-json": true,
        "parameters": [
          {
            "name": "format",
            "description": "Output format (json or xml)",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string"
          },
          {
            "name": "folder",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "ctm",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Exported data in desired format",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Folder not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/folder/{server}/{folderName}": {
      "delete": {
        "summary": "delete a folder",
        "description": "Delete a folder",
        "tags": [
          "deploy"
        ],
        "operationId": "deleteFolder",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The name of the Control-M in which the folder(s) are deployed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "folderName",
            "in": "path",
            "description": "The name of the required folder(s).",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Folder was successfully removed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "ctm or folder not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/calendars": {
      "get": {
        "summary": "Get deployed calendars that match the search criteria.",
        "description": "Get definition of calendars as json code that match the requested search criteria.",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "deploy"
        ],
        "operationId": "getDeployedCalendars",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search fields are name, server, type and alias",
        "x-additional-usage": "-s <search query>",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "type",
            "enum": [
              "Regular",
              "Periodic",
              "RuleBased"
            ],
            "description": "Calendar type.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "alias",
            "description": "Calendar alias name for z/OS servers.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Exported data in desired format",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Calendar not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/calendar/{calendarName}": {
      "delete": {
        "summary": "delete a calendar",
        "description": "Delete a calendar",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "deploy"
        ],
        "operationId": "deleteCalendar",
        "parameters": [
          {
            "name": "calendarName",
            "in": "path",
            "description": "The name of the calendar to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "name": "server",
            "in": "query",
            "description": "The name of the server in which the calendar deploy.",
            "required": false,
            "default": "Global",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Calendar was successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "ctm or calendar not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/deploy/sitestandard/{standardName}/fieldRestriction/{fieldName}": {
      "get": {
        "summary": "Get the allowed values for the specified field in the specified site standard.",
        "description": "Get the allowed values for the specified field in the specified site standard.",
        "tags": [
          "deploy"
        ],
        "operationId": "getSiteStandardFieldRestrictions",
        "x-min-em-version": "9.0.19.000",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "standardName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported data in desired format",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Cannot get allowed values, because this field does not have any allowed values defined",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Site standard is not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "Replace the allowed values for the specified field in the specified site standard.",
        "description": "Replace the allowed values for the specified field in the specified site standard.",
        "tags": [
          "deploy"
        ],
        "operationId": "setSiteStandardFieldRestrictions",
        "x-additional-usage": "-f <json file>",
        "x-min-em-version": "9.0.19.000",
        "x-action": "replaceValues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "standardName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuesFile",
            "in": "body",
            "description": "The JSON file with the allowed values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FieldValues"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful result message",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Cannot replace allowed values, because this field does not have any allowed values defined",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Site standard is not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/images/{os}": {
      "get": {
        "summary": "get list of available images for the requested OS",
        "description": "Get a list of the images in the system for the requested OS.",
        "x-action": "!",
        "x-additional-description": "Search field is version, values are 'latest' for the latest versions, '*' for all versions, '<number>' for specific versions that contain this number.",
        "x-additional-usage": [
          "-s version=*"
        ],
        "tags": [
          "provision"
        ],
        "operationId": "getImages",
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "The OS name of the requested images.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "filter according to specific version.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all available images",
            "schema": {
              "$ref": "#/definitions/StringListResult"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrades/agents": {
      "get": {
        "summary": "Get eligible agents for upgrade that match the requested search criteria.",
        "description": "Get eligible agents for upgrade that match the requested search criteria from Control-M server.",
        "tags": [
          "provision"
        ],
        "operationId": "getEligibleAgentsForUpgrade",
        "x-additional-description": "Search fields are type (Agent, MFT, AppPack) and version.",
        "x-additional-usage": "-s <search query>",
        "x-exclusiveDeliveryMode": "onPrem",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The type (Agent, MFT, AppPack).",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The eligible agents for upgrade list.",
            "schema": {
              "$ref": "#/definitions/UpgradeAgentInfoList"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrade/{upgradeId}": {
      "get": {
        "summary": "Get upgrade activity status for specific upgrade id.",
        "description": "Get upgrade activity status for specific upgrade id.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "getUpgradeActivityStatusPerUpgradeId",
        "parameters": [
          {
            "name": "upgradeId",
            "in": "path",
            "description": "The upgrade id.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "status of upgrade",
            "schema": {
              "$ref": "#/definitions/UpgradeRecord"
            }
          },
          "404": {
            "description": "Upgrade Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete upgrade activity status for specific upgrade id.",
        "description": "Delete upgrade activity status for specific upgrade id.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "deleteUpgradeActivity",
        "parameters": [
          {
            "name": "upgradeId",
            "in": "path",
            "description": "The upgrade id.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Activity status was successfully removed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Upgrade Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrades": {
      "get": {
        "summary": "Get all upgrade activities status.",
        "description": "Get all upgrade activities status.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "getAllUpgradeActivitiesStatus",
        "x-additional-description": "Search fields are ctm, agent, fromVersion, toVersion, activity, status and activityName",
        "x-additional-usage": "-s <search query>",
        "parameters": [
          {
            "name": "ctm",
            "in": "query",
            "description": "The Control-M server name",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "in": "query",
            "description": "The Control-M server name",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "agent",
            "in": "query",
            "description": "The Control-M Agent name",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "fromVersion",
            "in": "query",
            "description": "Current product version",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "toVersion",
            "in": "query",
            "description": "Upgrade to version",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "activity",
            "in": "query",
            "description": "Activity type (Install, Uninstall)",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "status",
            "in": "query",
            "description": "Upgrade activity status (Cancel, Running, Completed, TransferCompleted, Failed, Unavailable)",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "activityName",
            "in": "query",
            "description": "Name of the upgrade activity",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "upgrades status",
            "schema": {
              "$ref": "#/definitions/UpgradeRecordList"
            }
          },
          "404": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrade/{upgradeId}/output": {
      "get": {
        "summary": "Returns log of upgrade activity.",
        "description": "Returns log of upgrade activity",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "getUpgradeActivityLog",
        "parameters": [
          {
            "name": "upgradeId",
            "in": "path",
            "description": "The upgrade id.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Content of upgrade output",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Upgrade Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrades/versions": {
      "get": {
        "summary": "Get available versions for upgrade.",
        "description": "Get available versions for upgrade",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "getDeployVersions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of upgrade version info",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpgradeInfo"
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrade/install": {
      "post": {
        "summary": "Transfer and install a product on an agent",
        "description": "Transfer and install a product on an agent",
        "x-action": "install",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "transferAndInstallProduct",
        "parameters": [
          {
            "name": "upgradeRequest",
            "in": "body",
            "description": "Upgrade request details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpgradeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Getting upgrade response",
            "schema": {
              "$ref": "#/definitions/UpgradeResponse"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrade/{upgradeId}/retry": {
      "post": {
        "summary": "Retry upgrade activity",
        "description": "Retry upgrade activity",
        "x-action": "retry",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "retryUpgradeActivity",
        "parameters": [
          {
            "name": "upgradeId",
            "in": "path",
            "description": "Id of upgrade to retry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Getting upgrade retry response",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Upgrade Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrade/{upgradeId}/cancel": {
      "post": {
        "summary": "Cancel upgrade activity",
        "description": "Cancel upgrade activity",
        "x-action": "cancel",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "provision"
        ],
        "operationId": "cancelUpgradeActivity",
        "parameters": [
          {
            "name": "upgradeId",
            "in": "path",
            "description": "Id of upgrade to cancel",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Getting upgrade cancel response",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Upgrade Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/provision/upgrade/uninstall": {
      "post": {
        "summary": "Uninstall a product from an agent",
        "description": "Uninstall a product from an agent",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-action": "uninstall",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "tags": [
          "provision"
        ],
        "operationId": "uninstallProduct",
        "parameters": [
          {
            "name": "rollbackRequest",
            "in": "body",
            "description": "Rollback request details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpgradeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Getting rollback response",
            "schema": {
              "$ref": "#/definitions/UpgradeResponse"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/reporting/download": {
      "get": {
        "summary": "Download report by name.",
        "description": "Download report by name.",
        "x-hidden": true,
        "x-action": "download_swagger",
        "x-min-em-version": "9.0.21.000",
        "tags": [
          "reporting"
        ],
        "operationId": "downloadReportByName",
        "parameters": [
          {
            "name": "reportId",
            "in": "query",
            "description": "Report File Name",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/InputStreamResource"
            }
          },
          "401": {
            "description": "No Access to report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "No such report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/reporting/report/{name}": {
      "get": {
        "summary": "Retrieves a report by name.",
        "description": "Retrieves a report by name in the desired format (CSV,PDF ,EXCEL). If the report is shared, add [shared:] before the name. This REST API command will be deprecated soon.",
        "x-additional-usage": "-o",
        "x-additional-props": "{\"outputfile\":\"reportURL\"}",
        "x-hidden": true,
        "x-action": "get_old",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "reporting"
        ],
        "operationId": "getReportByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The report name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Report Url.",
            "schema": {
              "$ref": "#/definitions/ReportResult"
            }
          },
          "401": {
            "description": "No Access to report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "No such report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/reporting/report": {
      "post": {
        "summary": "Run a report",
        "description": "Sends a request to generate a report asynchronously and returns the request status. If the report is shared, add [shared:] before the name.",
        "operationId": "runReport",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-action": "!",
        "tags": [
          "reporting"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reportRun",
            "in": "body",
            "description": "The report generation parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunReport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report generagion request info",
            "schema": {
              "$ref": "#/definitions/RunReportInfo"
            }
          },
          "401": {
            "description": "No Access to report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "No such report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/reporting/status/{reportId}": {
      "get": {
        "summary": "Retrieves status information for a report generation request based on the report ID",
        "description": "Retrieves status information for a report generation request based on the report ID",
        "operationId": "getReportStatus",
        "tags": [
          "reporting"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "The ID of the report",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Report generagion request info",
            "schema": {
              "$ref": "#/definitions/RunReportInfo"
            }
          },
          "404": {
            "description": "No such request ID",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/reporting/reportFilters/{name}": {
      "get": {
        "x-min-em-version": "9.0.20.000",
        "summary": "Retrieves report filters",
        "description": "Retrieves report filters",
        "operationId": "getReportFilters",
        "tags": [
          "reporting"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The report name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Report generagion request info",
            "schema": {
              "$ref": "#/definitions/RunReport"
            }
          },
          "404": {
            "description": "No such report",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run": {
      "post": {
        "summary": "Run jobs",
        "description": "Run jobs according to given definitions file (JSON or zip).",
        "x-additional-usage": [
          "-i"
        ],
        "x-additional-props": "{\"interactive\":\"monitorPageURI\"}",
        "x-action": "!",
        "tags": [
          "run"
        ],
        "operationId": "runJobs",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "jobDefinitionsFile",
            "in": "formData",
            "description": "File that contains the definitions of the jobs to run. It can be a JSON file, or a zip file that can contain one or more JSON files, as well as account(s) information.",
            "required": true,
            "type": "file"
          },
          {
            "name": "deployDescriptorFile",
            "in": "formData",
            "description": "Deploy Descriptor JSON file.",
            "required": false,
            "type": "file"
          },
          {
            "name": "additionalConfiguration",
            "in": "formData",
            "required": false,
            "type": "file",
            "x-hidden": true,
            "description": "additionalConfiguration to enable skip testing for local connection profile"
          }
        ],
        "responses": {
          "200": {
            "description": "Run result that can be used to track run jobs.",
            "schema": {
              "$ref": "#/definitions/RunResult"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/order": {
      "post": {
        "summary": "Execute requested jobs in certain folder",
        "description": "Run jobs from selected folder according to given filter",
        "x-additional-usage": [
          "-f <configuration file> -i"
        ],
        "x-additional-props": "{\"interactive\":\"monitorPageURI\"}",
        "x-action": "!",
        "tags": [
          "run"
        ],
        "operationId": "orderJobsInFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "parameters to select the jobs to run",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderFolderParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Run result that can be used to track run jobs.",
            "schema": {
              "$ref": "#/definitions/RunResult"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/status": {
      "get": {
        "summary": "Get status of a job",
        "description": "Get the job status.",
        "tags": [
          "run"
        ],
        "operationId": "getJobStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job ID returned from the run status action.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested statuses.",
            "schema": {
              "$ref": "#/definitions/JobRunStatus"
            }
          },
          "404": {
            "description": "run Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/jobs/status": {
      "get": {
        "summary": "Get jobs that match the search criteria.",
        "description": "Get status of jobs that match the requested search criteria.",
        "tags": [
          "run"
        ],
        "operationId": "getJobsStatusByFilter",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search fields are jobname, jobid, ctm, folder, host, application, subApplication, status, orderDateFrom, orderDateTo , fromTime, toTime, folderLibrary, hostGroup, runAs, command, filePath, fileName, workloadPolicy, ruleBasedCalender, resourceLock, resourcePool, description, held, folderHeld, cyclic and deleted.",
        "x-additional-usage": "-s <search query>",
        "parameters": [
          {
            "name": "limit",
            "description": "maximum jobs status to fetch (default 1000).",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "jobname",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "ctm",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "application",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "subApplication",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "host",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "folder",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "jobid",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "neighborhood",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-hidden": true
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "orderDateFrom",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "orderDateTo",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "fromTime",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "toTime",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "folderLibrary",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "hostGroup",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "runAs",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "command",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "fileName",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "workloadPolicy",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "ruleBasedCalendar",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "resourceMutex",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "resourceSemaphore",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "resourceLock",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "resourcePool",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "held",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-hidden": true
          },
          {
            "name": "folderHeld",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-hidden": true
          },
          {
            "name": "cyclic",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-hidden": true
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested statuses.",
            "schema": {
              "$ref": "#/definitions/JobStatusResult"
            }
          },
          "206": {
            "description": "Result with the requested statuses, number of jobs exceed the limit.",
            "schema": {
              "$ref": "#/definitions/JobStatusResult"
            }
          },
          "400": {
            "description": "bad request, invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/status/{runId}": {
      "get": {
        "summary": "Get status of running jobs",
        "description": "Run status of jobs started with the Run service.",
        "x-additional-usage": [
          "-i"
        ],
        "x-additional-props": "{\"interactive\":\"monitorPageURI\"}",
        "x-action": "!",
        "tags": [
          "run"
        ],
        "operationId": "getJobsStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "runId",
            "in": "path",
            "description": "Run ID returned from the run action.",
            "required": true,
            "type": "string"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "The index of the job status from which to start. returning results",
            "default": 0,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested statuses.",
            "schema": {
              "$ref": "#/definitions/JobStatusResult"
            }
          },
          "404": {
            "description": "run Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/output": {
      "get": {
        "summary": "Get job output",
        "description": "Get the output returned from a job.",
        "tags": [
          "run"
        ],
        "operationId": "getJobOutput",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "runNo",
            "in": "query",
            "description": "The execution number in case of multiple executions (0 will get the last execution's output)",
            "default": 0,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested job output.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Order Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/statistics": {
      "get": {
        "summary": "Get job statistics",
        "description": "Get the statistics from a job.",
        "tags": [
          "run"
        ],
        "operationId": "getJobStatistics",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested job's statistics.",
            "schema": {
              "$ref": "#/definitions/Statistics"
            }
          },
          "404": {
            "description": "Job ID not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/rerun": {
      "post": {
        "summary": "Run job again",
        "description": "Run an already executed job (again).",
        "x-action": "rerun",
        "x-additional-usage": "-f <rerun advance parameters file>",
        "tags": [
          "run"
        ],
        "operationId": "rerunJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "rerunParameters",
            "in": "body",
            "description": "The JSON file with the restart configuration and parameters",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RerunParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job execution details.",
            "schema": {
              "$ref": "#/definitions/JobRunStatus"
            }
          },
          "404": {
            "description": "Job id not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/log": {
      "get": {
        "summary": "Get job's log",
        "description": "Get the job execution log.",
        "tags": [
          "run"
        ],
        "operationId": "getJobLog",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested job log.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/kill": {
      "post": {
        "summary": "Cancel running job",
        "description": "Abort job execution.",
        "x-action": "kill",
        "tags": [
          "run"
        ],
        "operationId": "killJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The cancelled job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/runNow": {
      "post": {
        "summary": "Bypass scheduling cretirias and start the job",
        "description": "start a job immediately",
        "x-action": "runNow",
        "tags": [
          "run"
        ],
        "operationId": "runNow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/hold": {
      "post": {
        "summary": "hold the job so it will not start untill it is freed",
        "description": "hold the job",
        "x-action": "hold",
        "tags": [
          "run"
        ],
        "operationId": "holdJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/free": {
      "post": {
        "summary": "free an already held the job",
        "description": "free the job",
        "x-action": "free",
        "tags": [
          "run"
        ],
        "operationId": "freeJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/confirm": {
      "post": {
        "summary": "confirm a job",
        "description": "confirm a job that waits for confirmation",
        "x-action": "confirm",
        "tags": [
          "run"
        ],
        "operationId": "confirmJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/setToOk": {
      "post": {
        "summary": "set job end status to OK",
        "description": "set job status to OK, post processing action",
        "x-action": "setToOk",
        "tags": [
          "run"
        ],
        "operationId": "setToOK",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/delete": {
      "post": {
        "summary": "mark job as deleted",
        "description": "mark delete as deleted",
        "x-action": "delete",
        "tags": [
          "run"
        ],
        "operationId": "deleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/undelete": {
      "post": {
        "summary": "recover a mark for deletion job",
        "description": "recover a mark for deletion job",
        "x-action": "undelete",
        "tags": [
          "run"
        ],
        "operationId": "undeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/waitingInfo": {
      "get": {
        "summary": "get job's waiting information",
        "description": "get the reason why the job is in waiting status",
        "x-action": "waitingInfo",
        "tags": [
          "run"
        ],
        "operationId": "getWaitingInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job run id.",
            "schema": {
              "$ref": "#/definitions/StringListResult"
            }
          },
          "404": {
            "description": "Job Id not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/get": {
      "get": {
        "summary": "get active job",
        "description": "get the active job's data by job's order ID",
        "x-action": "get",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "run"
        ],
        "operationId": "getActiveJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported data in desired format",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Folder not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/job/{jobId}/modify": {
      "post": {
        "summary": "Modify active job",
        "description": "Modify active job, specified by order id according to given definitions file (JSON).",
        "x-action": "modify",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "run"
        ],
        "operationId": "modifyJob",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "jobDefinitionsFile",
            "in": "formData",
            "description": "File that contains the definitions of the job to modify. It should be a JSON file.",
            "required": true,
            "type": "file"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Run result that can be used to track run jobs.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/resource/{server}": {
      "post": {
        "summary": "Add a new pool resource.",
        "description": "Add a new pool resource.",
        "tags": [
          "run"
        ],
        "operationId": "addResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "description": "The Control-M Server hosting the resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "The defined resource name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cancelled job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/resource/{server}/{name}": {
      "post": {
        "summary": "Update a pool resource.",
        "description": "Update a pool resource.",
        "x-action": "update",
        "tags": [
          "run"
        ],
        "operationId": "updateResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "description": "The Control-M Server hosting the resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Resource name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "max",
            "description": "The defined resource name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceMax"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update sucssesful.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a pool resource.",
        "description": "Delete a pool resource.",
        "tags": [
          "run"
        ],
        "operationId": "deleteResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "description": "The Control-M Server hosting the resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update sucssesful.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/resources": {
      "get": {
        "summary": "Get all resources records matching search.",
        "description": "Get all resources records matching search.",
        "x-additional-description": "Search fields are ctm, name",
        "x-additional-usage": "-s <search query>",
        "tags": [
          "run"
        ],
        "operationId": "getResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ctm",
            "description": "Control-M Server filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "description": "Control-M Server filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "name",
            "description": "The resource name filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested resources.",
            "schema": {
              "$ref": "#/definitions/ResourceSet"
            }
          },
          "404": {
            "description": "No such control-m",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/event/{server}": {
      "post": {
        "summary": "Add a new  event.",
        "description": "Add a new  event. date may be of format MMDD, ODAT to set current controlm date, STAT to set no date. default value is ODAT.",
        "tags": [
          "run"
        ],
        "operationId": "addEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "description": "The Control-M Server hosting the event.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "event",
            "description": "The defined event name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cancelled job run id.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/event/{server}/{name}/{date}": {
      "delete": {
        "summary": "Delete a  event.",
        "description": "Delete a  event.",
        "tags": [
          "run"
        ],
        "operationId": "deleteEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "description": "The Control-M Server hosting the event.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "event name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "description": "event date",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update sucssesful.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/events": {
      "get": {
        "summary": "Get all events records for specific search.",
        "description": "Get all events records for specific search.",
        "x-additional-description": "Search fields are ctm, name, date",
        "x-additional-usage": "-s <search query>",
        "tags": [
          "run"
        ],
        "operationId": "getEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ctm",
            "description": "Control-M Server filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "server",
            "description": "Control-M Server filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "name",
            "description": "The event name filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "date",
            "description": "The event date filter.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "limit",
            "description": "maximum events to fetch (default 1000).",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int64",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Result with the requested events.",
            "schema": {
              "$ref": "#/definitions/EventSet"
            }
          },
          "404": {
            "description": "No such control-m",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/workloadpolicy/{workloadpolicyName}": {
      "delete": {
        "summary": "delete workloadpolicy",
        "description": "Delete workloadpolicy",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "run"
        ],
        "operationId": "deleteWorkloadPolicy",
        "parameters": [
          {
            "name": "workloadpolicyName",
            "in": "path",
            "description": "The name of the workloadPolicy to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "workloadPolicy was successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "workloadPolicy name not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/workloadpolicies": {
      "get": {
        "summary": "get workload policies",
        "description": "Get all the workload policies.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "run"
        ],
        "operationId": "getWorkloadPolicies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "type": "string",
            "description": "Optionally state filter. Available values Active, Inactive"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the workload policies.",
            "schema": {
              "$ref": "#/definitions/WorkloadPolicyList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "Add workload policies from definitions file",
        "description": "Add workload policies from json definitions file to Control-M",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-action": "add",
        "tags": [
          "run"
        ],
        "operationId": "addWorkloadPolicies",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "workloadpoliciesfile",
            "in": "formData",
            "description": "A file that contains definitions of workload policies",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "workload policies add results",
            "schema": {
              "$ref": "#/definitions/WorkloadPoliciesFileResults"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/workloadpolicy/{policy}/activate": {
      "post": {
        "summary": "activate workload policy",
        "description": "Activate a workload policy, supports wildcard in names",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-action": "activate",
        "tags": [
          "run"
        ],
        "operationId": "activateWorkloadPolicy",
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "description": "The policy name to be activated. Case sensitive. Wildcards can be used.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ctm",
            "description": "Optional Control-M Server filter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "server",
            "description": "Optional Control-M Server filter.",
            "in": "query",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Policy was successfully activated.",
            "schema": {
              "$ref": "#/definitions/WorkloadPolicyStateList"
            }
          },
          "404": {
            "description": "Policy not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/workloadpolicy/{policy}/deactivate": {
      "post": {
        "summary": "deactivate a workload policy",
        "description": "Deactivate a workload policy, supports wildcard in names",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-action": "deactivate",
        "tags": [
          "run"
        ],
        "operationId": "deactivateWorkloadPolicy",
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "description": "The policy name to be deactivated. Case sensitive. Wildcards can be used.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ctm",
            "description": "Optional Control-M Server filter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "server",
            "description": "Optional Control-M Server filter.",
            "in": "query",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Policy was successfully deactivated.",
            "schema": {
              "$ref": "#/definitions/WorkloadPolicyStateList"
            }
          },
          "404": {
            "description": "Policy not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/workloadpolicies/detailed": {
      "get": {
        "summary": "get full workLoad policies data that match the search criteria.",
        "description": "get full workLoad policies data as json code that match the requested search criteria.",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "run"
        ],
        "operationId": "getDetailedWorkloadPolicies",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search field is name",
        "x-additional-usage": "-s <search query>",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Exported data in desired format",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "workload policy not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/alerts": {
      "post": {
        "summary": "Update alert.",
        "description": "Update alert.",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-action": "update",
        "tags": [
          "run"
        ],
        "operationId": "updateAlert",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertModifyValue",
            "in": "body",
            "description": "File that contains the alert propery that want to be update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update sucssesful.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/alerts/status": {
      "post": {
        "summary": "Update alert status.",
        "description": "Update alert status.",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-action": "update",
        "tags": [
          "run"
        ],
        "operationId": "updateAlertStatus",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertModifyStatusValue",
            "in": "body",
            "description": "File that contains the alert status propery that want to be update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertStatusParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update status sucssesful.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Control-M not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/run/services/sla": {
      "get": {
        "x-min-em-version": "9.0.18.200",
        "summary": "Get SLA active services",
        "description": "Get all SLA active services",
        "tags": [
          "run"
        ],
        "operationId": "getActiveServices",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All services",
            "schema": {
              "$ref": "#/definitions/ActiveServices"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/hostgroup/{hostgroup}": {
      "delete": {
        "summary": "delete host group",
        "description": "delete host group",
        "x-min-em-version": "9.0.19.000",
        "tags": [
          "config"
        ],
        "operationId": "deleteHostGroup",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostgroup",
            "in": "path",
            "description": "The hostgroup name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Host Group was successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Failed to delete hostgroup",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "403": {
            "description": "Permission denied error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "update agents in hostgroup.",
        "description": "update agents in hostgroup.",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-min-em-version": "9.0.19",
        "x-action": "update",
        "tags": [
          "config"
        ],
        "operationId": "updateHostsInHostgroup",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostgroup",
            "in": "path",
            "description": "The hostgroup name",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostGroupMemberParamsList",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HostgroupProperties"
            },
            "description": "Agent list to update in a hostgroup",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successfully created hostgroup or updated agents in existing hostgroup",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Failed to add agent",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "403": {
            "description": "Permission denied error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/user/effectiveRights": {
      "get": {
        "summary": "Get user real effective authorizations",
        "description": "Get user real effective authorizations by all his roles",
        "x-min-em-version": "9.0.20.080",
        "tags": [
          "config"
        ],
        "operationId": "getUserEffectiveRights",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/RoleData"
            }
          },
          "401": {
            "description": "Login failed",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/em/param/{name}": {
      "post": {
        "summary": "set value of a an em system parameter",
        "description": "Set value of an enterprise management system parameter",
        "x-action": "set",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "setSystemParam",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Parameter name",
            "required": true,
            "type": "string"
          },
          {
            "name": "newValue",
            "in": "body",
            "description": "Param new value",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server was successfully removed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server or folder not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}": {
      "delete": {
        "summary": "Delete Server",
        "description": "Delete Server",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "removeControlmServer",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Server host name.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Server was successfully removed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server or folder not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/failover": {
      "put": {
        "summary": "Perform Manual Failover on a specified Server",
        "description": "Perform Manual Failover on a specified Server",
        "x-action": "failover",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "failover",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "MFO successful",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/setasprimary": {
      "put": {
        "summary": "Set secondary server as Primary on a specified Server",
        "description": "Set secondary server as Primary on a specified Server",
        "x-action": "setasprimary",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "setasprimary",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set as Primary successful",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/servers": {
      "get": {
        "summary": "get all the Servers name and hostname in the system",
        "description": "Get the names and hostnames of all Servers in the system.",
        "tags": [
          "config"
        ],
        "operationId": "getServers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Servers hostname (list)",
            "schema": {
              "$ref": "#/definitions/CtmDetailsList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server": {
      "post": {
        "summary": "add server to the system",
        "description": "Add a Server. This command setting up new server in the system",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addServer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddServerParams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Server was successfully added.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Failed to add the erver",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/params": {
      "get": {
        "summary": "get Server parameters",
        "description": "Get all the parameters of the specified Server.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getServerParameters",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server to query.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Server parameters.",
            "schema": {
              "$ref": "#/definitions/KeyValueListResult"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent": {
      "post": {
        "x-exclusiveDeliveryMode": "onPrem",
        "summary": "add agent to Server",
        "description": "Add an agent to Server. This command does not install or configure the agent. It only defines the agent in the system.",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "tags": [
          "config"
        ],
        "operationId": "addAgent",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is going to be added to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddAgentParams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Agent was successfully added.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/ping": {
      "post": {
        "summary": "ping to the agent in the Server",
        "description": "Ping an Agent.",
        "x-action": "ping",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "tags": [
          "config"
        ],
        "operationId": "pingAgent",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PingAgentParams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ping to the agent was successfully requested.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "bad request, invalid patrameners",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "ping not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/enable": {
      "post": {
        "summary": "enable agent from the Server",
        "description": "Enable an Agent. This command does not install or configure the agent. It only enable existing agent in the system.",
        "x-action": "enable",
        "tags": [
          "config"
        ],
        "operationId": "enableAgent",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected too.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent to be enabled.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Agent was successfully enabled.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/disable": {
      "post": {
        "summary": "disable agent from the Server",
        "description": "Disable an Agent.",
        "x-action": "disable",
        "tags": [
          "config"
        ],
        "operationId": "disableAgent",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected too.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent to be disabled.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Agent was successfully disabled.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/item/{id}/recycle": {
      "post": {
        "summary": "recycle item",
        "description": "Recycle an item",
        "x-action": "recycle",
        "x-min-em-version": "9.0.19.000",
        "tags": [
          "config"
        ],
        "operationId": "recycleItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "item data",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Item was successfully recycled.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "item not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/remotehost": {
      "post": {
        "summary": "add remote host to Server",
        "description": "Add a remote host to Server.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addRemoteHost",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the remote host is going to be added to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The non default, advanced configuration data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddRemoteHostParams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Remote host was successfully added.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/remotehost/{remotehost}": {
      "delete": {
        "summary": "delete a remote host from Server",
        "description": "Delete a remote host from a Server.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deleteRemoteHost",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the remote host is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "remotehost",
            "in": "path",
            "description": "The name of the remote host to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Remote host was successfully removed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server or remote host not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "get": {
        "summary": "get a remote host configuration from Server",
        "description": "Get the remote host configuration properties from the Server",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getRemoteHostProperties",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the remote host  is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "remotehost",
            "in": "path",
            "description": "The name of the remote host.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The configuration properties of the remote host in the form of key value.",
            "schema": {
              "$ref": "#/definitions/AddRemoteHostParams"
            }
          },
          "404": {
            "description": "server or remote host not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/remotehost/{remotehost}/authorize": {
      "post": {
        "summary": "Authorize",
        "description": "Authorized known ssh remote host.",
        "x-action": "authorize",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "authorizeSshKnownRemotehost",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the remote host is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "remotehost",
            "in": "path",
            "description": "The name of the remote host.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Remote host was successfully authorized.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server or remote host not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agents": {
      "get": {
        "summary": "get Server agents",
        "description": "Get all the agents of the specified Server.",
        "tags": [
          "config"
        ],
        "operationId": "getAgents",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server to query. Optionally you can filter agent name of host or alias of the Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "query",
            "type": "string",
            "description": "Optionally case insensitive agent name filter of host or alias of the Agent. `ctm server:agents::get Server AgentName` returns all agents which names start with `agentname`"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all the server agents.",
            "schema": {
              "$ref": "#/definitions/AgentDetailsList"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/remotehosts": {
      "get": {
        "summary": "get Server remote hosts",
        "description": "Get all the remote hosts of the specified Server.",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getRemoteHosts",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server to query.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all the server remote hosts.",
            "schema": {
              "$ref": "#/definitions/StringListResult"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/workflowinsights/status": {
      "get": {
        "summary": "get Workflow Insights status",
        "description": "get Workflow Insights status - topology and system parameters",
        "x-exclusiveDeliveryMode": "onPrem",
        "x-min-em-version": "9.0.20.200",
        "tags": [
          "config"
        ],
        "operationId": "getWorkflowInsightsStatus",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all the server remote hosts.",
            "schema": {
              "$ref": "#/definitions/WorkflowInsightsStatus"
            }
          },
          "401": {
            "description": "User is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Workflow Insights not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}": {
      "delete": {
        "summary": "delete an agent from Server",
        "description": "Delete an agent from a Server. This will not shut the agent down. It only disconnects and removes it from the list.",
        "tags": [
          "config"
        ],
        "operationId": "deleteAgent",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The name of the agent to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Agent was deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "server or agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/params": {
      "get": {
        "summary": "get agent parameters",
        "description": "Get all the parameters of the specified Agent.",
        "tags": [
          "config"
        ],
        "operationId": "getAgentParameters",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The name of the agent to query.",
            "required": true,
            "type": "string"
          },
          {
            "name": "extendedData",
            "in": "query",
            "description": "True to return more agent parameters. HIDDEN",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Agent parameters",
            "schema": {
              "$ref": "#/definitions/KeyValueListResult"
            }
          },
          "404": {
            "description": "server or agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/param/{name}": {
      "post": {
        "summary": "set agent parameter",
        "description": "Set the value of the specified parameter in the specified agent.",
        "x-action": "set",
        "tags": [
          "config"
        ],
        "operationId": "setAgentParameter",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the agent is connected to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The name of the agent to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The parameter name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The new parameter value.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OptionalValue"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Agent parameters",
            "schema": {
              "$ref": "#/definitions/KeyValue"
            }
          },
          "404": {
            "description": "server, agent or parameter name not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/hostgroups": {
      "get": {
        "summary": "get Server hostgroups",
        "description": "Get all the hostgroups of the specified Server.",
        "tags": [
          "config"
        ],
        "operationId": "getHostgroups",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the hostgroups belong to.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all the server hostgroups.",
            "schema": {
              "$ref": "#/definitions/StringListResult"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/hostgroup/{hostgroup}/agents": {
      "get": {
        "summary": "get hostgroup agents",
        "description": "Get the agents that compose the specified hostgroup",
        "tags": [
          "config"
        ],
        "operationId": "getHostsInGroup",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the hostgroup belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostgroup",
            "in": "path",
            "description": "The hostgroup name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all the agents in the hostgroup.",
            "schema": {
              "$ref": "#/definitions/AgentsInGroupListResult"
            }
          },
          "404": {
            "description": "server or hostgroup not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/hostgroup/{hostgroup}/agent": {
      "post": {
        "summary": "add agent to hostgroup",
        "description": "Add an agent to hostgroup. Create the the hostgroup if it does not exist.",
        "tags": [
          "config"
        ],
        "operationId": "addHostToHostgroup",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the hostgroup belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostgroup",
            "in": "path",
            "description": "The hostgroup name",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgentInHostgroup"
            },
            "description": "The hostname of the new agent",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The agent was added to the specified hostgroup.",
            "schema": {
              "$ref": "#/definitions/AgentsInGroupSuccessData"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/hostgroup/{hostgroup}/agent/{host}": {
      "delete": {
        "summary": "delete an agent from a hostgroup",
        "description": "Delete an agent from the specified hostgroup. If the group is empty it will also be deleted.",
        "tags": [
          "config"
        ],
        "operationId": "deleteHostFromGroup",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server the hostgroup belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostgroup",
            "in": "path",
            "description": "The hostgroup name",
            "required": true,
            "type": "string"
          },
          {
            "name": "host",
            "in": "path",
            "description": "The agent to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The agent was deleted from the specified hostgroup.",
            "schema": {
              "$ref": "#/definitions/AgentsInGroupSuccessData"
            }
          },
          "403": {
            "description": "Permission denied error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "server or hostgroup not found, or agent not found in hostgroup.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/secrets": {
      "get": {
        "summary": "Get list of secret names",
        "description": "Get the list of names of all the secrets in the vault",
        "tags": [
          "config"
        ],
        "operationId": "listSecrets",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all secret names.",
            "schema": {
              "$ref": "#/definitions/StringListResult"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/secret": {
      "post": {
        "summary": "Add a new secret",
        "description": "Add a new secret to the secrets vault.",
        "x-additional-prompt": [
          "-p"
        ],
        "tags": [
          "config"
        ],
        "operationId": "addSecret",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nameValue",
            "in": "body",
            "description": "The new secret value",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretKeyValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret was added successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Secret already exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/secret/{name}": {
      "post": {
        "summary": "Update an existing secret",
        "description": "Update an existing secret in the secrets vault.",
        "x-action": "update",
        "x-additional-prompt": [
          "-p"
        ],
        "tags": [
          "config"
        ],
        "operationId": "updateSecret",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the secret to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "body",
            "description": "The new value for the secret",
            "schema": {
              "$ref": "#/definitions/SecretValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret was updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Secret not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing secret",
        "description": "Delete an existing secret from the secrets vault.",
        "tags": [
          "config"
        ],
        "operationId": "deleteSecret",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the secret to update",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret was deleted successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Secret not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/archive/cleanup": {
      "delete": {
        "summary": "Deletes data (jobs including outputs and logs) from the Workload Archiving database.",
        "description": "Deletes data (jobs including outputs and logs) by search criteria from the Workload Archiving database.",
        "x-additional-description": "Cleanup fields are jobname, jobnameExceptions, server, serverExceptions, folder, folderExceptions, application, applicationExceptions, subApplication, subApplicationExceptions, library, libraryExceptions, jobStatus and ruleName.",
        "x-additional-usage": "-s <search query>",
        "x-action": "cleanup",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "sendArchiveCleanupRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "application",
            "description": "Job's application.",
            "in": "query",
            "type": "string",
            "required": false,
            "x-hidden": true
          },
          {
            "name": "applicationExceptions",
            "description": "Cleanup should skip job's application that are mentioned in exceptions",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "subApplication",
            "description": "Job's sub application",
            "in": "query",
            "type": "string",
            "required": false,
            "x-hidden": true
          },
          {
            "name": "subApplicationExceptions",
            "description": "Job's sub application exception",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "ctm",
            "description": "server name",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "server",
            "description": "Server name",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "ctmExceptions",
            "description": "server exceptions",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "serverExceptions",
            "description": "Server exceptions",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "folder",
            "description": "Job's folder.",
            "in": "query",
            "type": "string",
            "required": false,
            "x-hidden": true
          },
          {
            "name": "folderExceptions",
            "description": "Job's folder exceptions",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "jobname",
            "description": "Job's name",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "jobnameExceptions",
            "description": "Job's name exceptions",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "library",
            "description": "Job's library",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "libraryExceptions",
            "description": "Job's library exceptions",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "ruleName",
            "description": "Job's archive rule",
            "in": "query",
            "type": "string",
            "x-hidden": true,
            "required": false
          },
          {
            "name": "jobStatus",
            "enum": [
              "Ended OK",
              "Ended Not OK"
            ],
            "description": "The job's end status.",
            "in": "query",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workload Archiving cleanup completed successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/archive/statistics": {
      "get": {
        "summary": "Get Workload Archiving statistics",
        "description": "Get list of statistical information for each Archiving rule and total information about the number of jobs that have been archived, data size of all job logs and outputs that have been archived, size of the Workload Archiving database including all tables and indexes and percentage of disk space used on the Workload Archiving server",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getArchiveStatistics",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Archiving statistics per rule (list)",
            "schema": {
              "$ref": "#/definitions/RulesStatisticListSummary"
            }
          },
          "401": {
            "description": "User is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/archive/rules": {
      "get": {
        "summary": "Get all Workload Archiving rules",
        "description": "Get all the Archiving rules",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getAllArchiveRules",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workload Archiving rules (list)",
            "schema": {
              "$ref": "#/definitions/ArchiveRulesList"
            }
          },
          "401": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/archive/rule": {
      "post": {
        "summary": "Add Workload Archiving rule",
        "description": "Add a new Workload Archiving rule",
        "x-action": "add",
        "x-additional-usage": "-f <configuration file>",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addArchiveRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "archiveRule",
            "in": "body",
            "description": "archive rule details to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArchiveRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive rule was added",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/archive/rule/{ruleName}": {
      "post": {
        "summary": "Edit Workload Archiving rule",
        "description": "Edit Workload Archiving rule details",
        "x-action": "update",
        "x-additional-usage": "-f <configuration file>",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "updateArchiveRule",
        "parameters": [
          {
            "name": "ruleName",
            "in": "path",
            "description": "Rule name to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "archiveRule",
            "in": "body",
            "description": "Edit Workload Archiving rule details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArchiveRule"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workload Archiving rule was updated",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "rule was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Workload Archiving rule",
        "description": "Deletes Workload Archiving rule by name. It is required to send deleteRuleData flag to specify if rule need to be deleted with all the collected data or deleteRuleWithoutData otherwise.",
        "x-action": "delete",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deleteArchiveRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleName",
            "in": "path",
            "description": "Rule name to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteRuleDataFlag",
            "in": "query",
            "description": "Remove rule with collected data or without. REQUIRED.",
            "type": "string",
            "required": true,
            "enum": [
              "deleteRuleData",
              "deleteRuleWithoutData"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Archive rule was deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "rule was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Archive add-on is not installed or down",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/runasuser": {
      "post": {
        "summary": "Add a new Run-as user",
        "description": "Add a new Run-as user to server.",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-additional-prompt": [
          "-p"
        ],
        "tags": [
          "config"
        ],
        "operationId": "createRunAsUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runAsUserData",
            "in": "body",
            "description": "Run as user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunAsUserData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Run-as user was added",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Run-as user already exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User is not authorized on the agent",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/runasuser/{agent}/{user}/test": {
      "post": {
        "summary": "Test existed Run-as user",
        "description": "Test existing Run-as user in server.",
        "x-action": "test",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "tags": [
          "config"
        ],
        "operationId": "testRunAsUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "path",
            "description": "The user name",
            "required": true,
            "type": "string"
          },
          {
            "name": "runAsUserDetailsData",
            "in": "body",
            "description": "Run as user details data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RunAsUserDetailsData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test is OK",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Test Failed",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User is not authorized on the agent",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Run-As user not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/runasuser/{agent}/{user}": {
      "post": {
        "summary": "Update Run-as user",
        "description": "Update Run-as user details in server.",
        "x-action": "update",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-additional-prompt": [
          "-p"
        ],
        "tags": [
          "config"
        ],
        "operationId": "updateRunAsUser",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "path",
            "description": "The user name",
            "required": true,
            "type": "string"
          },
          {
            "name": "runAsUserDetailsData",
            "in": "body",
            "description": "Run as user details data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunAsUserDetailsData"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Run-as was updated",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User is not authorized on the agent",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Run-As user not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "get": {
        "summary": "Get Run-as user",
        "description": "Get Run-as user details from server.",
        "tags": [
          "config"
        ],
        "operationId": "getRunAsUser",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "path",
            "description": "The user name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Run-as user details",
            "schema": {
              "$ref": "#/definitions/RunAsUserData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Run-as user not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "delete Run-as user",
        "description": "Delete Run-as user from server",
        "x-action": "delete",
        "tags": [
          "config"
        ],
        "operationId": "deleteRunAsUser",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "path",
            "description": "The user name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Run-as user was deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "User is not authorized on the agent",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Run-as user not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/runasusers": {
      "get": {
        "summary": "Get Run-as user list that match the requested search criteria.",
        "description": "Get Run-as user list that match the requested search criteria from server.",
        "tags": [
          "config"
        ],
        "operationId": "getRunAsUsersList",
        "x-additional-description": "Search fields are user and agent.",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "description": "The Run-as user.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "agent",
            "in": "query",
            "description": "The agent.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Run-as users list",
            "schema": {
              "$ref": "#/definitions/RunAsUsersList"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/role": {
      "post": {
        "summary": "Add Authorization Role",
        "description": "Add Authorization Role",
        "tags": [
          "config"
        ],
        "operationId": "addRole",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "roleFile",
            "in": "formData",
            "description": "File with contenet of Role Data.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors were found in input file or role already exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/role/{role}": {
      "post": {
        "summary": "Update Authorization Role",
        "description": "Update Authorization Role",
        "x-action": "update",
        "tags": [
          "config"
        ],
        "operationId": "updateRole",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The Role name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleFile",
            "in": "formData",
            "description": "File with contenet of Role Data.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Role update successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors were found in input file or role not exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "get": {
        "summary": "Get Authorization Role",
        "description": "Get Authorization Role",
        "tags": [
          "config"
        ],
        "operationId": "getRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The Role name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The role definitions",
            "schema": {
              "$ref": "#/definitions/RoleData"
            }
          },
          "404": {
            "description": "Role was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Authorization Role",
        "description": "Delete Authorization Role",
        "tags": [
          "config"
        ],
        "operationId": "deleteAuthorizationRole",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The Role name.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Role was deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Role not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/roles": {
      "get": {
        "summary": "Get Authorization Roles",
        "description": "Get Authorization Roles",
        "tags": [
          "config"
        ],
        "operationId": "getAllAuthorizationRoles",
        "x-additional-description": "Search fields are role.",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "The Role name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "description",
            "in": "query",
            "description": "The Role description.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of authorization roles",
            "schema": {
              "$ref": "#/definitions/RoleHeaderList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/ldap/{ldapgroup}/role/{role}": {
      "post": {
        "summary": "Add a role to LDAP group",
        "description": "Add a role to LDAP group so any user belong to the LDAP group will get all permissions defined in the role",
        "tags": [
          "config"
        ],
        "operationId": "addRoleToLdapGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ldapgroup",
            "in": "path",
            "description": "Name of LDAP group",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "Name of role",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ldap group was successfully added to role",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors were found when adding ldap to role",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Role was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a role from LDAP group",
        "description": "Delete a role from LDAP group",
        "tags": [
          "config"
        ],
        "operationId": "deleteRoleFromLdapGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ldapgroup",
            "in": "path",
            "description": "Name of LDAP group",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "Name of role",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ldap group was successfully deleted from role",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors were found when deleting ldap from role",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Role was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/organizationgroup/{organizationgroup}/roles": {
      "get": {
        "summary": "Get Authorization Roles associated with an organization group",
        "description": "Get Authorization Roles associated with an organization group",
        "tags": [
          "config"
        ],
        "operationId": "getAllRolesAssociatedWithOrganizationGroup",
        "x-additional-description": "Search fields are role name.",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "organizationgroup",
            "in": "path",
            "description": "Name of organization group",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "description": "The Role name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of authorization roles associated with the organization group",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "organization group was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/organizationgroups": {
      "get": {
        "summary": "Get All organization groups",
        "description": "Get All organization groups",
        "tags": [
          "config"
        ],
        "operationId": "getAllOrganizationGroups",
        "x-additional-description": "Search fields are organization group name.",
        "x-min-em-version": "9.0.19.000",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "organizationgroup",
            "in": "query",
            "description": "The organization group name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of organization groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/user": {
      "post": {
        "summary": "Add user",
        "description": "Add user",
        "tags": [
          "config"
        ],
        "operationId": "addUser",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "userFile",
            "in": "formData",
            "description": "File with contenet of user data.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "User added successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors were found in input file or user already exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/user/{user}": {
      "post": {
        "summary": "Update user",
        "description": "Update user",
        "x-action": "update",
        "tags": [
          "config"
        ],
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "The user name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userFile",
            "in": "formData",
            "description": "File with contenet of user data.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Errors were found in input file",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "User not exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "get": {
        "summary": "Get user",
        "description": "Get user",
        "tags": [
          "config"
        ],
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "The user name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user definitions",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "404": {
            "description": "User was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete user",
        "tags": [
          "config"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "The user name.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User was deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/users": {
      "get": {
        "summary": "Get users",
        "description": "Get users",
        "tags": [
          "config"
        ],
        "operationId": "getAllUsers",
        "x-additional-description": "Search fields are user.",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The user name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "fullName",
            "in": "query",
            "description": "The user full name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "description",
            "in": "query",
            "description": "The user description.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of authorization users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserHeader"
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/user/{user}/role/{role}": {
      "post": {
        "summary": "Add a role to user",
        "description": "Add a role to user so that user will inherit role authorization",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addRoleToUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Name of user",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "Name of role",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "role was added successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "User or role was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a role from a user",
        "description": "Remove a role from a user",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "removeRoleFromUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Name of user",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "Name of role",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Role was successfully removed from user",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "User or role was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/user/{user}/password/adminUpdate": {
      "post": {
        "summary": "Change user password",
        "description": "Change user password",
        "x-action": "adminUpdate",
        "x-additional-prompt": [
          "-p"
        ],
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "changeUserPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "user name",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "body",
            "description": "The new password.",
            "schema": {
              "$ref": "#/definitions/UserPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Passwored changed successfully",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "password invalid",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/authorization/role/{role}/associates": {
      "get": {
        "summary": "Get all authorization entities associated with role",
        "description": "Get all authorization entities associated with role",
        "tags": [
          "config"
        ],
        "operationId": "getRoleAssociates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "role name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of associated entities with role",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssociateData"
              }
            }
          },
          "404": {
            "description": "Role not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/ssh/key": {
      "post": {
        "summary": "Generate RSA SSH Key",
        "description": "Generate RSA SSH Key pair for SFTP account authentication",
        "x-action": "generate",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "generateMftRsaSshKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "sshKeyProperties",
            "in": "body",
            "description": "Ssh Key pair properites",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SshKeyProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH key pair was generated",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "SSH key with that name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to generate SSH key pair",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/pgptemplates": {
      "get": {
        "summary": "Get PGP Templates",
        "description": "Get PGP Templates",
        "x-action": "get",
        "x-min-em-version": "9.0.18.000",
        "x-additional-description": "Search fields are name",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "tags": [
          "config"
        ],
        "operationId": "getPgpTemplates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The PGP Template Name",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "The GPG Templates list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PgpTemplateData"
              }
            }
          },
          "401": {
            "description": "The user is not authorized to get pgp templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/pgptemplate/{templateName}": {
      "post": {
        "summary": "Add PGP Template",
        "description": "Add PGP Template",
        "x-action": "add",
        "x-min-em-version": "9.0.18.000",
        "x-additional-usage": [
          "-f pgpTemplateData.json"
        ],
        "tags": [
          "config"
        ],
        "operationId": "addPgpTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "The PGP Template Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "pgpTemplateData",
            "in": "body",
            "description": "PGP Template Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PgpTemplateData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PGP template was added successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "PGP template name already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to get pgp templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "put": {
        "summary": "Update PGP Template",
        "description": "Update PGP Template",
        "x-action": "update",
        "x-min-em-version": "9.0.18.000",
        "x-additional-usage": [
          "-f pgpTemplateData.json"
        ],
        "tags": [
          "config"
        ],
        "operationId": "updatePgpTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "The PGP Template Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "pgpTemplateData",
            "in": "body",
            "description": "PGP Template Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PgpTemplateData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PGP template was updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "PGP template name cannot be renamed.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to get pgp templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "PGP template name wasn't found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete PGP Template",
        "description": "Delete PGP Template",
        "x-action": "delete",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "deletePgpTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "The PGP Template Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PGP template was deleted successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to get pgp templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "PGP template wasn't found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/configuration": {
      "get": {
        "summary": "Get MFT Configuration",
        "description": "Get MFT Configuration",
        "x-action": "get",
        "x-min-em-version": "9.0.18.000",
        "x-additional-description": "Search fields are name",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "tags": [
          "config"
        ],
        "operationId": "getMftConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The MFT configuration properties",
            "schema": {
              "$ref": "#/definitions/MftConfigurationData"
            }
          },
          "401": {
            "description": "The user is not authorized to view MFT configuration.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "Update MFT Configuration",
        "description": "Update MFT Configuration",
        "x-action": "update",
        "x-min-em-version": "9.0.18.000",
        "x-additional-usage": [
          "-f mftConfigurationData.json"
        ],
        "tags": [
          "config"
        ],
        "operationId": "updateMftConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "mftConfigurationData",
            "in": "body",
            "description": "MFT Configuration Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MftConfigurationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MFT configuration saved successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to set MFT configuration.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/zostemplates": {
      "get": {
        "summary": "Get z/OS Templates",
        "description": "Get z/OS Templates",
        "x-action": "get",
        "x-min-em-version": "9.0.18.000",
        "x-additional-description": "Search fields are name",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "tags": [
          "config"
        ],
        "operationId": "getZosTemplates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The z/OS Template Name",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "The z/OS Templates list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZosTemplateData"
              }
            }
          },
          "401": {
            "description": "The user is not authorized to get z/OS templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/zostemplate/{templateName}": {
      "post": {
        "summary": "Add z/OS Template",
        "description": "Add z/OS Template",
        "x-action": "add",
        "x-min-em-version": "9.0.18.000",
        "x-additional-usage": [
          "-f zosTemplateData.json"
        ],
        "tags": [
          "config"
        ],
        "operationId": "addZosTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "The z/OS Template Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "zosTemplateData",
            "in": "body",
            "description": "z/OS Template Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZosTemplateData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "z/OS template was added successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "z/OS template name already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to get z/OS templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "put": {
        "summary": "Update z/OS Template",
        "description": "Update z/OS Template",
        "x-action": "update",
        "x-min-em-version": "9.0.18.000",
        "x-additional-usage": [
          "-f zosTemplateData.json"
        ],
        "tags": [
          "config"
        ],
        "operationId": "updateZosTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "The z/OS Template Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "zosTemplateData",
            "in": "body",
            "description": "z/OS Template Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZosTemplateData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "z/OS template was updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "z/OS template name cannot be renamed.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to get z/OS templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "z/OS template name wasn't found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete z/OS Template",
        "description": "Delete z/OS Template",
        "x-action": "delete",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "deleteZosTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "The z/OS Template Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "z/OS template was deleted successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to get zos templates.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "z/OS template wasn't found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/externaluser": {
      "post": {
        "summary": "Add and external user",
        "description": "Add and external user for b2b",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-additional-prompt": [
          "-p"
        ],
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addExternalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "externalUserData",
            "in": "body",
            "description": "External user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalUserData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External user was successfully added",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "External user already exists",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "the user is not authorized to add external user",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/externaluser/{username}": {
      "delete": {
        "summary": "Delete an external user",
        "description": "Delete an existing external user in MFT",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deleteExternalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name of the external user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "External user was successfully deleted",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to delete external user",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "External user was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "Update an external user",
        "description": "Update an external user for b2b",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-additional-prompt": [
          "-p"
        ],
        "x-min-em-version": "9.0.18.000",
        "x-action": "update",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "updateExternalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The external user name",
            "required": true,
            "type": "string"
          },
          {
            "name": "externalUserData",
            "in": "body",
            "description": "External user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalUserData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External user was updated",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "The user is not authorized to update external user",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "External user was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/externalusers": {
      "get": {
        "summary": "Get MFT external users that match the search criteria.",
        "description": "Get MFT external users that match the search criteria.",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "getExternalUsers",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search fields are name, email, description, company and phoneNumber",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "x-exclusiveDeliveryMode": "onPrem",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The user name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "email",
            "in": "query",
            "description": "The user email.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "description",
            "in": "query",
            "description": "The user description.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "company",
            "in": "query",
            "description": "The user company.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "The user phoneNumber.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "The external users list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalUserData"
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/externaluser/{name}/virtualfolders": {
      "get": {
        "summary": "Get MFT external user authorized folders",
        "description": "Get MFT external user authorized folders",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getExternalUserAuthorizedFolders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The external user name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The external user authorized folders list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "External user was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/virtualfolder": {
      "post": {
        "summary": "Add virtual folder",
        "description": "Add virtual folder",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addMFTFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderPropertiesData",
            "in": "body",
            "description": "virtual folder data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderPropertiesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "virtual folder was added",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "virtual folder already existed",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "the user is not authorized to add virtual folder",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/virtualfolder/{folderName}": {
      "delete": {
        "summary": "Delete a virtual folder.",
        "description": "Delete an existing virtual folder in MFT.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deleteMFTFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderName",
            "in": "path",
            "description": "Name of folder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual folder was successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "Virtual folder was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "Update an existing virtual folder in MFT.",
        "description": "Update an existing virtual folder in MFT.",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-min-em-version": "9.0.18.000",
        "x-action": "update",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "updateMFTFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderName",
            "in": "path",
            "description": "Name of folder",
            "required": true,
            "type": "string"
          },
          {
            "name": "folderPropertiesData",
            "in": "body",
            "description": "virtual folder data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderPropertiesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual folder was successfully updated.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "the user is not authorized to update virtual folder",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Virtual folder was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/virtualfolder/{folderName}/user/{userOrGroup}": {
      "post": {
        "summary": "Add external user or user groups to virtual folder external users list.",
        "description": "Add external user user groups to virtual folder external users list.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addExternalUserOrUserGroupToMFTFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderName",
            "in": "path",
            "description": "Name of folder",
            "required": true,
            "type": "string"
          },
          {
            "name": "userOrGroup",
            "in": "path",
            "description": "The user name or group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "External ser or user group was added to virtual folder.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to assign external user or user group to virtual folder.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Virtual folder or user was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove an external user or user group from an existing virtual folder in MFT.",
        "description": "Remove an external user or user group from an existing virtual folder in MFT.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deleteExternalUserOrUserGroupFromMFTFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderName",
            "in": "path",
            "description": "Name of folder",
            "required": true,
            "type": "string"
          },
          {
            "name": "userOrGroup",
            "in": "path",
            "description": "The user name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "External user or user group was removed from virtual folder.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to remove external user or user group from virtual folder.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Virtual folder or user was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/virtualfolders": {
      "get": {
        "summary": "Get MFT virtual folders that match the search criteria.",
        "description": "Get MFT virtual folders that match the search criteria.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getMFTFolders",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search fields are name, authorizedInternalUsers, authorizedExternalUsersAndGroups, allowedFilePattern and blockedFilePattern",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The virtual folder name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual folder list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FolderPropertiesData"
              }
            }
          },
          "401": {
            "description": "The user is not authorized to view all virtual folders",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/usergroup": {
      "post": {
        "summary": "Add user group.",
        "description": "Add user group.",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addMftUserGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserGroupPropertiesData",
            "in": "body",
            "description": "User group object properites",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupPropertiesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group was added.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "User group already exist.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to add user group.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/usergroup/{name}": {
      "post": {
        "summary": "Update user group.",
        "description": "Update user group.",
        "x-action": "update",
        "x-additional-usage": [
          "-f <configuration file>"
        ],
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "updateMftUserGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "User group name",
            "type": "string",
            "required": true
          },
          {
            "name": "UserGroupDetailsData",
            "in": "body",
            "description": "User group details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupDetailsData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group was updated.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to update user group.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "User group was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user group.",
        "description": "Delete user group.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deleteMftUserGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "User group name",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User group was deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized to delete user group.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "User group was not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/usergroups": {
      "get": {
        "summary": "Get all user groups that match the search criteria.",
        "description": "Get all user groups that match the search criteria.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getMftUserGroups",
        "produces": [
          "application/json"
        ],
        "x-additional-description": "Search fields are name, externalUsers, and ldapGroups",
        "x-additional-usage": [
          "-s <search query>"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The user group name.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "externalUsers",
            "in": "query",
            "description": "external users.",
            "required": false,
            "type": "string",
            "x-hidden": true
          },
          {
            "name": "ldapGroups",
            "in": "query",
            "description": "ldap groups.",
            "required": false,
            "type": "string",
            "x-hidden": true
          }
        ],
        "responses": {
          "200": {
            "description": "User group was added.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroupPropertiesData"
              }
            }
          },
          "401": {
            "description": "The user is not authorized to add user group.",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/hub/{nodeId}/status": {
      "get": {
        "summary": "Get hub status.",
        "description": "Get hub status.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getHubStatusDetails",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Node ID of the hub",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The hub status details",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No hub found on the nodeId",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/gateway": {
      "post": {
        "summary": "add gateway.",
        "description": "add gateway.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addGateway",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayData",
            "in": "body",
            "description": "gateway data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "gateway added successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/gateway/{gatewayName}": {
      "delete": {
        "summary": "remove gateway.",
        "description": "remove gateway.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "removeGateway",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayName",
            "in": "path",
            "description": "gateway name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "gateway removed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "404": {
            "description": "gateway not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/gateways": {
      "get": {
        "summary": "Get MFT gateways",
        "description": "Get MFT gateways",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getMftGateways",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The gateways list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GatewayData"
              }
            }
          },
          "400": {
            "description": "Mft version is lower than V20",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/mft/cluster/hub/{agentname}": {
      "post": {
        "summary": "add hub to cluster.",
        "description": "add hub to cluster.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "addHubToCluster",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentname",
            "in": "path",
            "description": "Agent name",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "hub added to cluster.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "delete": {
        "summary": "remove hub from cluster.",
        "description": "remove hub from cluster.",
        "x-min-em-version": "9.0.18.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "removeHubFromCluster",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentname",
            "in": "path",
            "description": "Agent name",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "hub removed from cluster.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/crt/expiration": {
      "get": {
        "summary": "Get certificate expiration date.",
        "description": "Get the certificate expiration date of SSL configured Agent.",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "getAgentCertificateExpirationDate",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Agent certificate expiration data",
            "schema": {
              "$ref": "#/definitions/AgentCertificateExpirationData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/csr": {
      "post": {
        "summary": "Create certificate signing request (CSR).",
        "description": "Create certificate signing request (CSR) on SSL configured Agent.",
        "x-action": "create",
        "x-additional-usage": "-f <configuration file>",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "createAgentCertificateSigningRequest",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent.",
            "required": true,
            "type": "string"
          },
          {
            "name": "csrData",
            "in": "body",
            "description": "Certificate Signing Request (CSR) data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateSigningRequestData"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The CSR was successfully created.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/crt": {
      "post": {
        "summary": "Deploy certificate (CRT).",
        "description": "Deploy certificate (CRT) on SSL configured Agent.",
        "x-action": "deploy",
        "x-min-em-version": "9.0.20.000",
        "x-exclusiveDeliveryMode": "onPrem",
        "tags": [
          "config"
        ],
        "operationId": "deployAgentCertificate",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server.",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent.",
            "required": true,
            "type": "string"
          },
          {
            "name": "crtFile",
            "in": "formData",
            "description": "The CRT file path.",
            "required": true,
            "type": "file"
          },
          {
            "name": "caChainFile",
            "in": "formData",
            "description": "The CA Chain file path.",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The CRT was successfully deployed.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/ssh/host/{hostname}": {
      "post": {
        "summary": "Authorize SSH Host",
        "description": "Authorize SSH Host for SFTP account",
        "x-action": "authorize",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "authorizeMftSshHost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostname",
            "in": "path",
            "description": "Ssh Hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "port",
            "in": "query",
            "description": "Ssh port for the relevant host",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SSH host was authorized",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized for this action",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/ssh/cluster/{clusterName}": {
      "post": {
        "summary": "Authorize SSH Cluster",
        "description": "Authorize SSH Cluster",
        "x-action": "authorize",
        "x-min-em-version": "9.0.18.000",
        "x-additional-usage": [
          "-f nodePortDefinitions.json"
        ],
        "tags": [
          "config"
        ],
        "operationId": "authorizeMftSshCluster",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "path",
            "description": "Ssh Cluster Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostnamePortList",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ClusterAuthorizationData"
            },
            "description": "File with content of hostnames and ports",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSH cluster was authorized",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "401": {
            "description": "The user is not authorized for this action",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    },
    "/config/server/{server}/agent/{agent}/mft/fts/settings": {
      "get": {
        "summary": "Get File Transfer Server (FTS) configuration data.",
        "description": "Get File Transfer Server (FTS) configuration data.",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "getFtsSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "File Transfer Server (FTS) configuration data",
            "schema": {
              "$ref": "#/definitions/FtsSettingsData"
            }
          },
          "401": {
            "description": "The user is not authorized to view FTS settings",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      },
      "post": {
        "summary": "Update File Transfer Server (FTS) configuration data.",
        "description": "Update File Transfer Server (FTS) configuration data.",
        "x-action": "update",
        "x-additional-usage": "-f <configuration file>",
        "x-min-em-version": "9.0.18.000",
        "tags": [
          "config"
        ],
        "operationId": "updateFtsSettings",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "The Server",
            "required": true,
            "type": "string"
          },
          {
            "name": "agent",
            "in": "path",
            "description": "The Agent",
            "required": true,
            "type": "string"
          },
          {
            "name": "ftsSettingsData",
            "in": "body",
            "description": "File Transfer Server (FTS) configuration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FtsSettingsData"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "FTS configuration was updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessData"
            }
          },
          "400": {
            "description": "Bad parameters",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "401": {
            "description": "The user is not authorized to update FTS settings",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddRemoveSuccessData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The success message that describes the performed action."
        },
        "currentItems": {
          "type": "array",
          "description": "List of the items remained after the action.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Matching": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "array of 3 items describing the matching term. example [&quot;FileName&quot;, &quot;like&quot;, &quot;a*&quot;]"
    },
    "TermGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Matching"
      },
      "description": "list of matching terms, combined by AND"
    },
    "StringListResult": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "SuccessData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The success message that describes the performed action."
        }
      }
    },
    "ErrorData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The error message that describes the problem."
        },
        "id": {
          "type": "string",
          "description": "An internal identifier of the error."
        },
        "item": {
          "type": "string",
          "description": "Reference to the item this error is referring to."
        },
        "file": {
          "type": "string",
          "description": "The file this error occurred in."
        },
        "line": {
          "type": "integer",
          "description": "The number of line in the file this error occurred in."
        },
        "col": {
          "type": "integer",
          "description": "The number of column in the file this error occurred in."
        }
      }
    },
    "ErrorList": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorData"
          }
        }
      }
    },
    "WarningData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The error message that describes the problem."
        },
        "id": {
          "type": "string",
          "description": "An internal identifier of the error."
        },
        "item": {
          "type": "string",
          "description": "Reference to the item this error is referring to."
        },
        "file": {
          "type": "string",
          "description": "The file this error occurred in."
        },
        "line": {
          "type": "integer",
          "description": "The number of line in the file this error occurred in."
        },
        "col": {
          "type": "integer",
          "description": "The number of column in the file this error occurred in."
        }
      }
    },
    "WarningList": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WarningData"
          }
        }
      }
    },
    "ConvertLcpToCcpResults": {
      "type": "object",
      "properties": {
        "pollId": {
          "type": "string",
          "description": "Poll id"
        },
        "convertStatus": {
          "type": "string",
          "description": "Currently convert status. ENDED_OK, ENDED_NOT_OK, PARTIAL_RESULTS, UNKNOWN"
        },
        "convertState": {
          "type": "string",
          "description": "Current convert local cps state. number of converted connection profiles from total connection profile."
        },
        "isDryRun": {
          "type": "boolean",
          "description": "Determines whether this is a simulation of conversion."
        },
        "successfulConvertedCps": {
          "type": "integer",
          "description": "Determines the number of successfully converted connections profiles."
        },
        "skippedConvertedCps": {
          "type": "integer",
          "description": "Determines the number of skipped to connections profiles."
        },
        "failedConvertedCps": {
          "type": "integer",
          "description": "Determines the number of failed to connections profiles."
        },
        "convertedConnectionProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skippedToConvertConnectionProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failedToConvertConnectionProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentFileError"
          }
        }
      }
    },
    "DeploymentFileResults": {
      "type": "object",
      "properties": {
        "deploymentFile": {
          "type": "string",
          "description": "The name of a specific deployment file."
        },
        "pollId": {
          "type": "string",
          "description": "Poll id in case of a long deploy process"
        },
        "deploymentState": {
          "type": "string",
          "description": "Current deployment step and state. CALENDARS_DEPLOYED, CONNECTION_PROFILES_DEPLOYED, DEPLOYING_FOLDERS, folders deployed, etc."
        },
        "deploymentStatus": {
          "type": "string",
          "description": "Currently deployment status. ENDED_OK, ENDED_NOT_OK, PARTIAL_RESULTS, UNKNOWN"
        },
        "successfulFoldersCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed simple folders."
        },
        "successfulSmartFoldersCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed smart folders."
        },
        "successfulSubFoldersCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed sub folders."
        },
        "successfulJobsCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed sub folders."
        },
        "successfulConnectionProfilesCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed sub folders."
        },
        "successfulDriversCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed sub folders."
        },
        "successfulCalendarsCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed sub folders."
        },
        "successfulSiteStandardsCount": {
          "type": "integer",
          "description": "Determines the number of successfully deployed sub folders."
        },
        "isDeployDescriptorValid": {
          "type": "boolean",
          "description": "Determines if the deployment file is a valid deploy descriptor file."
        },
        "deployedFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployedJobs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployedSubFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployedDrivers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployedConnectionProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployedCalendars": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployedSiteStandardss": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentFileError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WarningData"
          }
        }
      }
    },
    "AysncPollDeploymentFileResults": {
      "type": "object",
      "properties": {
        "FinalDeploymentFileResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentFileResults"
          }
        },
        "PartialResult": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentFileError": {
      "type": "object",
      "properties": {
        "lines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WarningsCollection": {
      "type": "object",
      "properties": {
        "WarningList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ArchiveJobsList": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        },
        "returned": {
          "type": "integer"
        },
        "additionalJobsMatchSearchCriteria": {
          "type": "boolean"
        }
      }
    },
    "Job": {
      "allOf": [
        {
          "$ref": "#/definitions/JobRunStatus"
        },
        {
          "type": "object",
          "properties": {
            "duration": {
              "type": "integer"
            },
            "runAs": {
              "type": "string"
            },
            "archiveRule": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JobRunStatus": {
      "type": "object",
      "required": [
        "jobId"
      ],
      "properties": {
        "jobId": {
          "type": "string",
          "description": "Order ID of the job."
        },
        "folderId": {
          "type": "string",
          "description": "Order ID of the folder containing this job."
        },
        "numberOfRuns": {
          "type": "integer",
          "format": "int64",
          "description": "The run number (in case of cyclic jobs or reruns)"
        },
        "name": {
          "type": "string",
          "description": "The name of the run job."
        },
        "folder": {
          "type": "string",
          "description": "The name of the run job."
        },
        "type": {
          "type": "string",
          "description": "The type of the run job."
        },
        "status": {
          "type": "string",
          "description": "The status of the run job."
        },
        "held": {
          "type": "boolean",
          "description": "Is job held."
        },
        "deleted": {
          "type": "boolean",
          "description": "Is job held."
        },
        "cyclic": {
          "type": "boolean",
          "description": "Is it a cyclic job."
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the job run."
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the job run."
        },
        "estimatedStartTime": {
          "type": "array",
          "description": "The estimated start time of the jobs.",
          "items": {
            "type": "string"
          }
        },
        "estimatedEndTime": {
          "type": "array",
          "description": "The estimated end time of the jobs.",
          "items": {
            "type": "string"
          }
        },
        "orderDate": {
          "type": "string",
          "description": "The order date."
        },
        "ctm": {
          "type": "string",
          "description": "The controlm server."
        },
        "description": {
          "type": "string",
          "description": "The job description."
        },
        "host": {
          "type": "string",
          "description": "host machine where the job runs."
        },
        "library": {
          "type": "string",
          "description": "The folder library."
        },
        "application": {
          "type": "string",
          "description": "job application."
        },
        "subApplication": {
          "type": "string",
          "description": "job subApplication."
        },
        "jobJSON": {
          "type": "string",
          "description": "The JSON string that describes the job."
        },
        "outputURI": {
          "type": "string",
          "description": "A URI that can be used to get the output of the run job"
        },
        "logURI": {
          "type": "string",
          "description": "A URI that can be used to get the log of the run job"
        }
      }
    },
    "JobStatusResult": {
      "type": "object",
      "properties": {
        "completion": {
          "type": "string",
          "enum": [
            "Completed",
            "Pending",
            null
          ]
        },
        "statuses": {
          "type": "array",
          "description": "The list of statuses tracked by the given runId.",
          "items": {
            "$ref": "#/definitions/JobRunStatus"
          }
        },
        "startIndex": {
          "type": "integer",
          "description": "The index of the first item in the list.",
          "format": "int64"
        },
        "itemsPerPage": {
          "type": "integer",
          "description": "The maximum number of items returned by each status request.",
          "format": "int64"
        },
        "returned": {
          "type": "integer",
          "description": "The number of the return items by the search.",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "description": "The total number of items.",
          "format": "int64"
        },
        "sort": {
          "type": "string",
          "description": "The field the list is sorted by."
        },
        "nextURI": {
          "type": "string",
          "description": "URI to get the next items in the list, if any."
        },
        "prevURI": {
          "type": "string",
          "description": "URI to get the previous items in the list, if any."
        },
        "monitorPageURI": {
          "type": "string",
          "description": "A URI to a page displaying the workflow run live."
        }
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "log": {
          "type": "string"
        }
      }
    },
    "Output": {
      "type": "object",
      "properties": {
        "output": {
          "type": "string"
        }
      }
    },
    "App": {
      "type": "object",
      "description": "App (job type) object for AI deploy api",
      "properties": {
        "displayname": {
          "type": "string",
          "description": "job type display name"
        },
        "name": {
          "type": "string",
          "description": "job type name"
        },
        "desc": {
          "type": "string",
          "description": "description"
        },
        "defaultType": {
          "type": "string",
          "description": "default type"
        },
        "lastModified": {
          "type": "string",
          "description": "last modification date"
        },
        "createdOn": {
          "type": "string",
          "description": "creation date"
        },
        "createdBy": {
          "type": "string",
          "description": "creation author"
        }
      }
    },
    "AppDeployed": {
      "type": "object",
      "description": "Deployed app (job type) object for AI deploy api",
      "properties": {
        "displayname": {
          "type": "string",
          "description": "job type display name"
        },
        "name": {
          "type": "string",
          "description": "job type name"
        },
        "version": {
          "type": "string",
          "description": "version"
        },
        "defaultType": {
          "type": "string",
          "description": "default type"
        },
        "lastDeployed": {
          "type": "string",
          "description": "last deployment date"
        },
        "lastPublished": {
          "type": "string",
          "description": "last publishment date"
        },
        "iconBase64": {
          "type": "string",
          "description": "base64 icon job"
        },
        "createdOn": {
          "type": "string",
          "description": "creation date"
        },
        "createdBy": {
          "type": "string",
          "description": "creation author"
        }
      }
    },
    "AppList": {
      "type": "object",
      "description": "App list object for AI deploy api",
      "properties": {
        "appNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/App"
          }
        },
        "deployedNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppDeployed"
          }
        }
      }
    },
    "AppDetails": {
      "type": "object",
      "description": "App details object for AI deploy api",
      "properties": {
        "description": {
          "type": "string",
          "description": "base64 description"
        },
        "lastPublished": {
          "type": "string",
          "description": "last published date"
        },
        "code": {
          "type": "string",
          "description": "error code"
        },
        "message": {
          "type": "string",
          "description": "error message"
        }
      }
    },
    "AppDeployResponse": {
      "type": "object",
      "description": "Deployed App (job type) object response for AI deploy api",
      "properties": {
        "status": {
          "type": "string",
          "description": "status"
        },
        "message": {
          "type": "string",
          "description": "message"
        },
        "agentName": {
          "type": "string",
          "description": "agent name"
        }
      }
    },
    "AppPredeployResponse": {
      "type": "object",
      "description": "Pre-deployed App (job type) object response for AI deploy api",
      "properties": {
        "appName": {
          "type": "string",
          "description": "app name"
        },
        "readyStatus": {
          "type": "string",
          "description": "ready status"
        }
      }
    },
    "AiError": {
      "type": "object",
      "description": "AI standard error object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error message"
        },
        "status": {
          "type": "integer",
          "description": "Http status code"
        }
      }
    },
    "AiJobtype": {
      "type": "object",
      "description": "Application integrator jobtype",
      "properties": {
        "jobTypeName": {
          "type": "string",
          "description": "Jobtype display name"
        },
        "jobTypeId": {
          "type": "string",
          "description": "Jobtype internal appname"
        },
        "status": {
          "type": "string",
          "description": "Jobtype status ['ready to deploy', 'draft']"
        },
        "description": {
          "type": "string",
          "description": "Jobtype description"
        }
      }
    },
    "AiJobtypeList": {
      "type": "object",
      "description": "List of application integrator jobtypes",
      "properties": {
        "jobtypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AiJobtype"
          }
        }
      }
    },
    "AiDeployResponse": {
      "type": "object",
      "description": "Response of deploy and pre-deploy AI jobtype",
      "properties": {
        "message": {
          "type": "string",
          "description": "response message"
        }
      }
    },
    "RulesStatisticListSummary": {
      "type": "object",
      "properties": {
        "rulesStatisticList": {
          "$ref": "#/definitions/RulesStatisticList"
        },
        "summary": {
          "$ref": "#/definitions/Summary"
        }
      }
    },
    "RulesStatisticList": {
      "type": "object",
      "properties": {
        "ruleStatistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleStatistics"
          }
        }
      }
    },
    "RuleStatistics": {
      "type": "object",
      "properties": {
        "ruleName": {
          "type": "string"
        },
        "retention": {
          "type": "integer"
        },
        "retentionType": {
          "type": "string",
          "enum": [
            "Years",
            "Months",
            "Days"
          ]
        },
        "oldestItem": {
          "type": "string"
        },
        "newestItem": {
          "type": "string"
        },
        "totalJobs": {
          "type": "integer"
        },
        "dataSize": {
          "type": "string"
        }
      }
    },
    "Summary": {
      "type": "object",
      "properties": {
        "totalNumberOfJobs": {
          "type": "integer"
        },
        "totalDataSize": {
          "type": "string"
        },
        "actualDbSize": {
          "type": "string"
        },
        "diskUsage": {
          "type": "string"
        }
      }
    },
    "ArchiveRulesList": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArchiveRule"
          }
        }
      },
      "xml": {
        "name": "Rules"
      }
    },
    "ArchiveRule": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The Control-M Workload Archiving rule name. REQUIRED. HIDDEN.",
          "type": "string"
        },
        "description": {
          "description": "The description of Control-M Workload Archiving rule. HIDDEN.",
          "type": "string"
        },
        "maxOutputSize": {
          "description": "The maximum job's output size to collect. HIDDEN.",
          "type": "string",
          "minimum": 1,
          "maximum": 100,
          "xml": {
            "attribute": true
          }
        },
        "maxOutputSizeType": {
          "description": "The maximum job's output size type to collect - KB or MB. The default is MB. HIDDEN.",
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "trimType": {
          "description": "Trim in case the output exceed the maximum job's output - Omit , Beginning, End. The default is to Omit. HIDDEN.",
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "retention": {
          "description": "The retention period to keep archive job by rule. The default is 1. HIDDEN.",
          "type": "string"
        },
        "retentionType": {
          "description": "The retention period type to keep archive job by rule- Years, Months and Days are available. The default is Years. HIDDEN.",
          "type": "string"
        },
        "isActive": {
          "description": "Is Control-M Workload Archiving rule is active. HIDDEN.",
          "type": "string"
        },
        "archivedType": {
          "description": "The rule archived data - logs, output or both. The default is both. HIDDEN.",
          "type": "string"
        },
        "ruleParameters": {
          "description": "Rule parameters - ctm, type, jobName, jobType, application, subApplication, jobStatus, folder and library. HIDDEN.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleCriteria"
          }
        }
      }
    },
    "RuleCriteria": {
      "type": "object",
      "properties": {
        "field": {
          "description": "Rule parameters fields can be one of the options - ctm, type, jobName, jobType, application, subApplication, jobStatus, folder and library. HIDDEN.",
          "type": "string"
        },
        "criteria": {
          "type": "string"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConnectionProfilesStatusResult": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "description": "The list of statuses tracked by the given runId.",
          "items": {
            "$ref": "#/definitions/ConnectionProfileStatus"
          }
        },
        "returned": {
          "type": "integer",
          "description": "The number of the return items by the search.",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "description": "The total number of items.",
          "format": "int64"
        }
      }
    },
    "ConnectionProfileStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "connection profile name"
        },
        "type": {
          "type": "string",
          "description": "connection profile type"
        },
        "description": {
          "type": "string",
          "description": "connection profile description"
        },
        "timeModified": {
          "type": "string",
          "description": "UTC date of the modification"
        },
        "timeCreated": {
          "type": "string",
          "description": "UTC date of the creation"
        },
        "creatorName": {
          "type": "string",
          "description": "creator's name"
        },
        "modifierName": {
          "type": "string",
          "description": "modifier's name"
        },
        "syncStatus": {
          "type": "string",
          "description": "Status calculated by the server according to the list of statuses with each server"
        }
      }
    },
    "ConnectionProfilesDeploymentStatusResult": {
      "type": "object",
      "properties": {
        "deploymentStatus": {
          "type": "string",
          "description": "Deployment status calculated by the server according to the list of statuses with each Control-M/Server"
        },
        "deploymentInfo": {
          "type": "array",
          "description": "The detailed deployment status per Control-M/Server",
          "items": {
            "$ref": "#/definitions/ConnectionProfileDeploymentInfo"
          }
        }
      }
    },
    "ConnectionProfileDeploymentInfo": {
      "type": "object",
      "properties": {
        "ctmName": {
          "type": "string",
          "description": "The logical name of Control-M/Server"
        },
        "status": {
          "type": "string",
          "description": "The deployment status of connection profile"
        },
        "statusCode": {
          "type": "integer",
          "description": "The deployment status code of connection profile"
        },
        "lastUpdate": {
          "type": "string",
          "description": "UTC date of the modification"
        },
        "message": {
          "type": "string",
          "description": "Status information"
        }
      }
    },
    "LoginCredentials": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "DeployAsyncResults": {
      "type": "object",
      "properties": {
        "pollId": {
          "type": "string",
          "description": "ID to use when polling for an answer"
        }
      }
    },
    "LoginResult": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "token": {
          "type": "string",
          "format": "password"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "PasswordsObject": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "user name HIDDEN"
        },
        "currentPassword": {
          "type": "string",
          "description": "current password",
          "x-prompt": "Current password",
          "format": "password"
        },
        "newPassword": {
          "type": "string",
          "description": "new password",
          "x-prompt": "New password",
          "format": "password"
        }
      }
    },
    "ActiveServices": {
      "type": "object",
      "properties": {
        "serviceLastUpdatedTime": {
          "type": "string"
        },
        "activeServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SLAService"
          }
        }
      }
    },
    "SLAService": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "Service Name"
        },
        "status": {
          "type": "string",
          "description": "Status Code"
        },
        "statusReason": {
          "type": "string",
          "description": "Status Reason"
        },
        "startTime": {
          "type": "string",
          "description": "Start Time"
        },
        "endTime": {
          "type": "string",
          "description": "End Time"
        },
        "dueTime": {
          "type": "string",
          "description": "Due Time"
        },
        "slackTime": {
          "type": "string",
          "description": "Slack Time"
        },
        "serviceOrderDateTime": {
          "type": "string",
          "description": "Service Order DateTime"
        },
        "scheduledOrderDate": {
          "type": "string",
          "description": "Control-M Order Date"
        },
        "serviceJob": {
          "type": "string",
          "description": "Service Key"
        },
        "serviceControlM": {
          "type": "string",
          "description": "Service Control-M"
        },
        "priority": {
          "type": "string",
          "description": "Priority"
        },
        "note": {
          "type": "string",
          "description": "User note"
        },
        "totalJobs": {
          "type": "string",
          "description": "Number of Jobs"
        },
        "jobsCompleted": {
          "type": "string",
          "description": "Jobs Completed"
        },
        "jobsWithoutStatistics": {
          "type": "string",
          "description": "Jobs without statistics"
        },
        "completionPercentage": {
          "type": "string",
          "description": "Completion Percentage"
        },
        "averageCompletionTime": {
          "type": "string",
          "description": "Average Completion Time"
        },
        "errors": {
          "type": "string",
          "description": "Error details"
        },
        "statusByJobs": {
          "type": "object",
          "description": "Status By Jobs",
          "$ref": "#/definitions/SLAServiceStatusByJobs"
        }
      }
    },
    "SLAServiceStatusByJobs": {
      "type": "object",
      "properties": {
        "executed": {
          "type": "string",
          "description": "Executed"
        },
        "waitCondition": {
          "type": "string",
          "description": "Wait Condition"
        },
        "waitResource": {
          "type": "string",
          "description": "Wait Resource"
        },
        "waitUser": {
          "type": "string",
          "description": "Wait User"
        },
        "waitHost": {
          "type": "string",
          "description": "Wait Host"
        },
        "waitWorkload": {
          "type": "string",
          "description": "Wait Workload"
        },
        "completed": {
          "type": "string",
          "description": "Completed"
        },
        "error": {
          "type": "string",
          "description": "Error"
        },
        "unknown": {
          "type": "string",
          "description": "Unkwown"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "ctm": {
          "type": "string",
          "description": "Control-M Server hosting the event"
        },
        "date": {
          "type": "string",
          "format": "string",
          "description": "The event date, either date in format dd/mm/yy or a string \"orderdate\""
        }
      }
    },
    "EventParam": {
      "type": "object",
      "required": [
        "name",
        "date"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "EventSet": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Event"
      }
    },
    "LogParams": {
      "type": "object",
      "properties": {
        "ctm": {
          "type": "string",
          "description": "The name of the Control-M server in which the job was ordered from. HIDDEN."
        },
        "orderId": {
          "type": "string",
          "description": "Job's order id. HIDDEN."
        },
        "numberOfRuns": {
          "type": "integer",
          "description": "Job's rerun number. HIDDEN."
        },
        "logTable": {
          "type": "string",
          "description": "Job's log table name, accepted as a value in search request. HIDDEN."
        }
      }
    },
    "NewSample": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "OrderFolderParameters": {
      "properties": {
        "ctm": {
          "description": "The Control-M Server to order from. REQUIRED.",
          "type": "string"
        },
        "folder": {
          "description": "The folder to order. REQUIRED.",
          "type": "string"
        },
        "jobs": {
          "description": "Filter the jobs to order.",
          "type": "string"
        },
        "library": {
          "description": "The z/os library that contains the job (only for MF).",
          "type": "string"
        },
        "createDuplicate": {
          "description": "Is it allowed to order the same jobs more than once to the same SMART folder. HIDDEN.",
          "type": "boolean"
        },
        "hold": {
          "description": "Are jobs ordered in a HOLD state. HIDDEN.",
          "type": "boolean"
        },
        "ignoreCriteria": {
          "description": "Is scheduling criteria to be ignored. HIDDEN.",
          "type": "boolean"
        },
        "independentFlow": {
          "description": "Whether to generate new flow in this order. HIDDEN.",
          "type": "boolean"
        },
        "orderDate": {
          "description": "The order date that is attached to this order command. HIDDEN.",
          "type": "string"
        },
        "orderIntoFolder": {
          "description": "Policy for placing the jobs in a SMART folder. HIDDEN.",
          "type": "string"
        },
        "waitForOrderDate": {
          "description": "Whether to wait for the order date when running the jobs. HIDDEN.",
          "type": "boolean"
        },
        "variables": {
          "description": "Job Variables for this run. HIDDEN.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "arg": "string",
              "arg2": "string",
              "arg3": "string"
            }
          }
        }
      }
    },
    "OutputParams": {
      "type": "object",
      "properties": {
        "ctm": {
          "type": "string",
          "description": "The name of the Control-M server in which the job was ordered from. HIDDEN."
        },
        "orderId": {
          "type": "string",
          "description": "Job's order id. HIDDEN."
        },
        "numberOfRuns": {
          "type": "integer",
          "description": "Job's rerun number. HIDDEN."
        },
        "outputTable": {
          "type": "string",
          "description": "Job's output table name, accepted as a value in search request. HIDDEN."
        }
      }
    },
    "ProvisionAdvanceParameters": {
      "properties": {
        "javaHome": {
          "description": "The JRE that will be used to install and run the agent",
          "type": "string"
        },
        "connectionInitiator": {
          "description": "Which component is allowed to initiate the connection [ServerToAgent | AgentToServer | BothAllowed]. Parameters start with capital letter.  HIDDEN.",
          "type": "string"
        },
        "tag": {
          "description": "Logical name that is used to label specific Control-M/Agents into a group with a specific authorization level.  HIDDEN.",
          "type": "string"
        },
        "serverHostName": {
          "description": "Control-M/Server name (in case it has an alias or multiple network interfaces).  HIDDEN.",
          "type": "string"
        },
        "serverPort": {
          "description": "Control-M/Server port to communicate with the agent.  HIDDEN.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResourceMax": {
      "type": "object",
      "required": [
        "max"
      ],
      "properties": {
        "max": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResourceObj": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name"
        },
        "ctm": {
          "type": "string",
          "description": "Control-M Server hosting the resource"
        },
        "available": {
          "type": "string",
          "description": "The resource q current quantity."
        },
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "The resource q max usage value."
        },
        "workloadPolicy": {
          "type": "string",
          "description": "Workload Policy."
        }
      }
    },
    "ResourceParam": {
      "type": "object",
      "required": [
        "name",
        "max"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "max": {
          "type": "string"
        }
      }
    },
    "ResourceSet": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ResourceObj"
      }
    },
    "ReportResult": {
      "type": "object",
      "required": [
        "reportURL"
      ],
      "properties": {
        "reportURL": {
          "type": "string",
          "description": "A URL to the report."
        }
      }
    },
    "RunReport": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "jobDef"
        },
        "format": {
          "type": "string",
          "example": "CSV"
        },
        "filters": {
          "description": "HIDDEN.",
          "$ref": "#/definitions/ReportFilters"
        },
        "dateTimeSettings": {
          "description": "HIDDEN.",
          "$ref": "#/definitions/ReportDateTimeSettings"
        }
      }
    },
    "ReportDateTimeSettings": {
      "type": "object",
      "properties": {
        "dateFormat": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "dateTimeFormat": {
          "type": "string"
        }
      }
    },
    "ReportFilters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportFilter"
      }
    },
    "ReportFilter": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "RunReportInfo": {
      "type": "object",
      "properties": {
        "reportId": {
          "type": "string",
          "example": "97aa4d17-c6d3-4e7d-94f7-b55dd4e04eaa"
        },
        "name": {
          "type": "string",
          "example": "jobDef"
        },
        "format": {
          "type": "string",
          "example": "CSV"
        },
        "status": {
          "type": "string",
          "example": "Pending"
        },
        "url": {
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        }
      }
    },
    "RunResult": {
      "type": "object",
      "required": [
        "runId"
      ],
      "properties": {
        "runId": {
          "type": "string",
          "description": "An ID that identifies running jobs and can be used to track their status."
        },
        "statusURI": {
          "type": "string",
          "description": "A URI that can be used to get the status of the run jobs."
        },
        "monitorPageURI": {
          "type": "string",
          "description": "A URI to a page displaying the workflow run live."
        }
      }
    },
    "FieldValues": {
      "type": "object",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "description": "HIDDEN.",
          "$ref": "#/definitions/Values"
        }
      }
    },
    "Values": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FieldValue"
      }
    },
    "FieldValue": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Sample": {
      "type": "object",
      "required": [
        "id",
        "title"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "SearchParams": {
      "type": "object",
      "properties": {
        "ctm": {
          "type": "string",
          "description": "The name of sthe Control-M server in which the job was ordered from. HIDDEN."
        },
        "jobName": {
          "type": "string",
          "description": "The name of the job. HIDDEN."
        },
        "app": {
          "type": "string",
          "description": "The name of the application the jobs belong to. HIDDEN."
        },
        "subApp": {
          "type": "string",
          "description": "The name of the sub-application the jobs belong to. HIDDEN."
        },
        "folder": {
          "type": "string",
          "description": "The name of the parent folder. HIDDEN."
        },
        "status": {
          "type": "string",
          "enum": [
            "OK",
            "NOTOK",
            "ALL"
          ],
          "description": "The job's end status. HIDDEN."
        },
        "lib": {
          "type": "string",
          "description": "The job's library name. HIDDEN."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum archived Jobs to display. HIDDEN."
        },
        "logContains": {
          "type": "string",
          "description": "Job log must contain the given phrase. HIDDEN."
        },
        "outputContains": {
          "type": "string",
          "description": "Job output must contain the given phrase. HIDDEN."
        },
        "memLib": {
          "type": "string",
          "description": "Member's library. HIDDEN."
        },
        "memName": {
          "type": "string",
          "description": "Member name. HIDDEN."
        },
        "nodeGroup": {
          "type": "string",
          "description": "Job's node group. HIDDEN."
        },
        "nodeId": {
          "type": "string",
          "description": "Job's node id (agent). HIDDEN."
        },
        "fromOrderDate": {
          "type": "string",
          "description": "Indicating a date by which will look for jobs that their order date started afterwards. Date format - YYYY-MM-DD. HIDDEN."
        },
        "toOrderDate": {
          "type": "string",
          "description": "Indicating a date by which will look for jobs that their order date ended before. Date format - YYYY-MM-DD. HIDDEN."
        },
        "orderId": {
          "type": "string",
          "description": "Job's order id. HIDDEN."
        },
        "runAs": {
          "type": "string",
          "description": "Runs as (username on agent machine). HIDDEN."
        },
        "startDate": {
          "type": "string",
          "description": "Job execution start date. Date format - YYYY-MM-DD. HIDDEN."
        },
        "endDate": {
          "type": "string",
          "description": "Job execution end date. Date format - YYYY-MM-DD. HIDDEN."
        }
      }
    },
    "UpgradeAgentInfo": {
      "type": "object",
      "properties": {
        "agent": {
          "type": "string",
          "description": "Agent name."
        },
        "ctm": {
          "type": "string",
          "description": "Control-M name."
        },
        "type": {
          "type": "string",
          "description": "Agent type (Agent, MFT, AppPack)."
        },
        "platform": {
          "type": "string",
          "description": "Platform."
        },
        "fromVersion": {
          "type": "string",
          "description": "From version."
        },
        "toVersion": {
          "type": "string",
          "description": "To version."
        }
      }
    },
    "UpgradeAgentInfoList": {
      "type": "array",
      "description": "List of all agents for upgrade.",
      "items": {
        "$ref": "#/definitions/UpgradeAgentInfo"
      }
    },
    "UpgradeRequest": {
      "type": "object",
      "properties": {
        "ctm": {
          "type": "string",
          "description": "Control-M name. REQUIRED"
        },
        "agent": {
          "type": "string",
          "description": "Agent name. REQUIRED"
        },
        "type": {
          "type": "string",
          "description": "Product type (Agent, MFT, AppPack). REQUIRED"
        },
        "version": {
          "type": "string",
          "description": "Target version to be installed or version that should be rollback REQUIRED"
        },
        "activityName": {
          "type": "string",
          "description": "Name of activity"
        },
        "installUser": {
          "type": "string",
          "description": "User that will install, upgrade or uninstall HIDDEN"
        },
        "notifyAddress": {
          "type": "string",
          "description": "List of email addresses separated by semicolon HIDDEN"
        },
        "description": {
          "type": "string",
          "description": "Description of activity HIDDEN"
        },
        "useNetworkDeployment": {
          "type": "boolean",
          "description": "Whether to deploy from a network location HIDDEN"
        },
        "javaHome": {
          "type": "string",
          "description": "The JRE location. If specified - will be used by the upgrade process and the upgraded Agent/Managed File Transfer/AppPack HIDDEN"
        }
      }
    },
    "UpgradeResponse": {
      "type": "object",
      "properties": {
        "upgradeId": {
          "type": "string",
          "description": "ID of upgrade activity"
        }
      }
    },
    "UpgradeInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "product type (Agent, MFT, AppPack)."
        },
        "version": {
          "type": "string",
          "description": "upgrade version"
        }
      }
    },
    "UpgradeRecordList": {
      "type": "object",
      "properties": {
        "upgradeRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpgradeRecord"
          }
        }
      }
    },
    "UpgradeRecord": {
      "type": "object",
      "properties": {
        "upgradeId": {
          "type": "string",
          "description": "upgrade id"
        },
        "ctm": {
          "type": "string",
          "description": "Control-M name"
        },
        "agent": {
          "type": "string",
          "description": "agnet name"
        },
        "package": {
          "type": "string",
          "description": "upgrade package type"
        },
        "fromVersion": {
          "type": "string",
          "description": "upgrade from version"
        },
        "toVersion": {
          "type": "string",
          "description": "upgrade to version"
        },
        "activity": {
          "type": "string",
          "description": "activity type (Transfer, Install, Rollback)"
        },
        "status": {
          "type": "string",
          "description": "status tyoe (Cancel, Running Complete,TransferCompleted, Failed,Unavailable)"
        },
        "message": {
          "type": "string",
          "description": "massage"
        },
        "creationTime": {
          "type": "string",
          "description": "creation time"
        },
        "transferStartTime": {
          "type": "string",
          "description": "transfer start time"
        },
        "transferEndTime": {
          "type": "string",
          "description": "transfer end time"
        },
        "installStartTime": {
          "type": "string",
          "description": "installation start time"
        },
        "installEndTime": {
          "type": "string",
          "description": "installation end time"
        },
        "activityName": {
          "type": "string",
          "description": "activity name"
        },
        "installUser": {
          "type": "string",
          "description": "install user"
        },
        "notifyAddress": {
          "type": "string",
          "description": "notify address"
        },
        "description": {
          "type": "string",
          "description": "description"
        }
      }
    },
    "WorkloadPolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "unique workload policy name"
        },
        "state": {
          "type": "string",
          "description": "workload policy state"
        },
        "orderNo": {
          "type": "string",
          "description": "workload policy order number"
        },
        "lastUpdate": {
          "type": "string",
          "description": "workload policy update date"
        },
        "updatedBy": {
          "type": "string",
          "description": "user which updated workload policy"
        },
        "description": {
          "type": "string",
          "description": "workload policy description"
        }
      }
    },
    "WorkloadPolicyList": {
      "type": "object",
      "properties": {
        "workloadPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadPolicy"
          }
        }
      }
    },
    "WorkloadPolicyState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "unique workload policy name"
        },
        "state": {
          "type": "string",
          "description": "workload policy state"
        }
      }
    },
    "WorkloadPolicyStateList": {
      "type": "object",
      "properties": {
        "workloadPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadPolicyState"
          }
        }
      }
    },
    "StatisticsSingleRun": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "description": "job run start time"
        },
        "endTime": {
          "type": "string",
          "description": "job run end time"
        },
        "cpuTime": {
          "type": "string",
          "description": "job run CPU time"
        },
        "runTime": {
          "type": "string",
          "description": "jobs run time"
        },
        "jobId": {
          "type": "string",
          "description": "run job id"
        },
        "orderDate": {
          "type": "string",
          "description": "job order date"
        }
      }
    },
    "Statistics": {
      "type": "object",
      "properties": {
        "currentPeriod": {
          "type": "string",
          "description": "Statistics calendar period"
        },
        "calendarControlm": {
          "type": "string",
          "description": "Statistics calendar Control-M"
        },
        "calendarName": {
          "type": "string",
          "description": "Statistics calendar name"
        },
        "periods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatisticsPeriod"
          }
        }
      }
    },
    "StatisticsAverageInfo": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "description": "Average start time"
        },
        "cpuTime": {
          "type": "string",
          "description": "Average CPU time"
        },
        "runTime": {
          "type": "string",
          "description": "Average time"
        }
      }
    },
    "StatisticsRunInfo": {
      "type": "object",
      "properties": {
        "averageInfo": {
          "$ref": "#/definitions/StatisticsAverageInfo",
          "description": "Statistics average information"
        },
        "runs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatisticsSingleRun"
          }
        }
      }
    },
    "StatisticsPeriod": {
      "type": "object",
      "properties": {
        "periodTag": {
          "type": "string",
          "description": "Period tag"
        },
        "runInfo": {
          "$ref": "#/definitions/StatisticsRunInfo",
          "description": "Statistics run information"
        }
      }
    },
    "RerunParameters": {
      "type": "object",
      "properties": {
        "zosParameters": {
          "$ref": "#/definitions/RerunZosParameters",
          "description": "Z/os restart parameters. HIDDEN."
        }
      }
    },
    "RerunZosParameters": {
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/RestartStep",
          "description": "start from specific step. HIDDEN."
        },
        "to": {
          "$ref": "#/definitions/RestartStep",
          "description": "end at specific step. HIDDEN."
        },
        "cleanup": {
          "type": "boolean",
          "description": "cleanup instead of running specific steps. HIDDEN."
        },
        "recaptureAbend": {
          "type": "string",
          "description": "TO BE ADDED. HIDDEN."
        },
        "recaptureConditionCode": {
          "type": "string",
          "description": "TO BE ADDED. HIDDEN."
        },
        "stepAdjustment": {
          "type": "boolean",
          "description": "TO BE ADDED. HIDDEN."
        },
        "restartParmMemberName": {
          "type": "string",
          "description": "TO BE ADDED. HIDDEN."
        }
      }
    },
    "RestartStep": {
      "type": "object",
      "properties": {
        "pgm": {
          "type": "string",
          "description": "program step"
        },
        "proc": {
          "type": "string",
          "description": "proc step"
        }
      }
    },
    "JobtypeAgent": {
      "type": "object",
      "description": "Specifications of an agent",
      "properties": {
        "server": {
          "type": "string",
          "description": "Server name"
        },
        "agent": {
          "type": "string",
          "description": "Agent name"
        }
      }
    },
    "DeployJobtypeResponse": {
      "type": "object",
      "description": "Response of deployed jobtype",
      "properties": {
        "deploymentFile": {
          "type": "string",
          "description": "The name of the deployed .ctmai file"
        },
        "successfulDeploys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobtypeAgent"
          }
        }
      }
    },
    "AlertParam": {
      "type": "object",
      "required": [
        "alertIds"
      ],
      "properties": {
        "alertIds": {
          "type": "array",
          "description": "alertIds. HIDDEN.",
          "items": {
            "type": "integer"
          }
        },
        "urgency": {
          "enum": [
            "Normal",
            "Urgent",
            "Critical"
          ],
          "type": "string",
          "description": "modify urgency. HIDDEN."
        },
        "comment": {
          "type": "string",
          "description": "modify comment. HIDDEN."
        }
      }
    },
    "AlertStatusParam": {
      "type": "object",
      "required": [
        "alertIds"
      ],
      "properties": {
        "alertIds": {
          "type": "array",
          "description": "alertIds. HIDDEN.",
          "items": {
            "type": "integer"
          }
        },
        "status": {
          "enum": [
            "Undefined",
            "Reviewed",
            "Closed",
            "New"
          ],
          "type": "string",
          "description": "modify status. HIDDEN."
        }
      }
    },
    "GetAlertInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "notes": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "ApiGtwSession": {
      "type": "object",
      "properties": {
        "session_id": {
          "type": "string"
        }
      },
      "title": "ApiGtwSession"
    },
    "RequestParametersWrapperEMDefaultRequestParametersWhyJobParameter'": {
      "type": "object",
      "properties": {
        "ctm_parameters": {
          "$ref": "#/definitions/WhyJobParameters"
        },
        "em_parameters": {
          "$ref": "#/definitions/EMDefaultRequestParameters"
        }
      },
      "title": "RequestParametersWrapper«EMDefaultRequestParameters,WhyJobParameters»"
    },
    "RequestParametersWrapperEMDefaultRequestParametersLogJobParameters": {
      "type": "object",
      "properties": {
        "ctm_parameters": {
          "$ref": "#/definitions/LogJobParameters"
        },
        "em_parameters": {
          "$ref": "#/definitions/EMDefaultRequestParameters"
        }
      },
      "title": "RequestParametersWrapper«EMDefaultRequestParameters,LogJobParameters»"
    },
    "LogJobParameters": {
      "type": "object",
      "properties": {
        "from_rerun_count": {
          "type": "string"
        },
        "order_id": {
          "type": "string"
        },
        "to_rerun_count": {
          "type": "string"
        }
      },
      "title": "LogJobParameters"
    },
    "LogJobResultItem": {
      "type": "object",
      "properties": {
        "data_arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/logDataArguments"
          }
        },
        "formatted_message": {
          "type": "string"
        },
        "full_line": {
          "type": "string"
        },
        "local_timestamp_iso8601": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "message_code": {
          "type": "string"
        }
      },
      "title": "LogJobResultItem"
    },
    "LogJobResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogJobResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "LogJobResults"
    },
    "logDataArguments": {
      "type": "object",
      "properties": {
        "value_str": {
          "type": "string"
        }
      },
      "title": "logDataArguments"
    },
    "WhyJobParameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string"
        }
      },
      "title": "WhyJobParameters"
    },
    "WhyJobResultItem": {
      "type": "object",
      "properties": {
        "line": {
          "type": "string"
        }
      },
      "title": "WhyJobResultItem"
    },
    "WhyJobResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WhyJobResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "WhyJobResults"
    },
    "EMDefaultRequestParameters": {
      "type": "object",
      "properties": {
        "annotation_category": {
          "type": "string"
        },
        "annotation_notes": {
          "type": "string"
        },
        "ctm_name": {
          "type": "string"
        },
        "net_name": {
          "type": "string"
        }
      },
      "title": "EMDefaultRequestParameters"
    },
    "EMBasicActiveRequestParameters": {
      "type": "object",
      "properties": {
        "annotation_category": {
          "type": "string"
        },
        "annotation_notes": {
          "type": "string"
        },
        "ctm_name": {
          "type": "string"
        },
        "net_name": {
          "type": "string"
        }
      },
      "title": "EMBasicActiveRequestParameters"
    },
    "EmJobsId": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "integer",
          "format": "int32"
        },
        "job_pattern": {
          "type": "string"
        }
      },
      "title": "EmJobsId"
    },
    "EmOrderFolder": {
      "type": "object",
      "properties": {
        "additional_params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValueAttribute"
          }
        },
        "em_job_id": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmJobsId"
          }
        },
        "folder_name": {
          "type": "string"
        },
        "library": {
          "type": "string"
        },
        "order_parameters": {
          "$ref": "#/definitions/OrderParameters"
        }
      },
      "title": "EmOrderFolder"
    },
    "EmOrderFolderParameters": {
      "type": "object",
      "properties": {
        "annotation_details": {
          "$ref": "#/definitions/AnnotationDetails"
        },
        "ctm_name": {
          "type": "string"
        },
        "em_order_folder_parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmOrderFolder"
          }
        }
      }
    },
    "NameValueAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "NameValueAttribute"
    },
    "AnnotationDetails": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "title": "AnnotationDetails"
    },
    "OrderParameters": {
      "type": "object",
      "properties": {
        "create_duplicate": {
          "type": "boolean"
        },
        "hold": {
          "type": "boolean"
        },
        "ignore_criteria": {
          "type": "boolean"
        },
        "independent_flow": {
          "type": "boolean"
        },
        "order_date": {
          "type": "string"
        },
        "order_into_folder": {
          "type": "string",
          "enum": [
            "New",
            "Recent",
            "OrderId",
            "Alone",
            "UNRECOGNIZED"
          ]
        },
        "order_into_folder_order_id": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValueAttribute"
          }
        },
        "wait_for_order_date": {
          "type": "boolean"
        }
      },
      "title": "OrderParameters"
    },
    "OrderFolderResultItem": {
      "type": "object",
      "properties": {
        "errored_count": {
          "type": "integer",
          "format": "int64"
        },
        "folder_name": {
          "type": "string"
        },
        "not_met_criteria_count": {
          "type": "integer",
          "format": "int64"
        },
        "order_folder_status": {
          "type": "string",
          "enum": [
            "OrderFolderStatusSuccess",
            "FolderNotFound",
            "UnKnownError",
            "UNRECOGNIZED"
          ]
        },
        "ordered_count": {
          "type": "integer",
          "format": "int64"
        },
        "ordered_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderedItemItem"
          }
        }
      },
      "title": "OrderFolderResultItem"
    },
    "MsgDataArguments": {
      "type": "object",
      "properties": {
        "value_str": {
          "type": "string"
        }
      },
      "title": "MsgDataArguments"
    },
    "OrderedItemItem": {
      "type": "object",
      "properties": {
        "file_name": {
          "type": "string"
        },
        "folder_name": {
          "type": "string"
        },
        "full_msg": {
          "type": "string"
        },
        "job_name": {
          "type": "string"
        },
        "job_type": {
          "type": "string",
          "enum": [
            "job",
            "smartFolder",
            "subFolder",
            "UNRECOGNIZED"
          ]
        },
        "msg_data_arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MsgDataArguments"
          }
        },
        "msg_id": {
          "type": "string"
        },
        "order_id": {
          "type": "string"
        }
      },
      "title": "OrderedItemItem"
    },
    "OrderFolderResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFolderResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "OrderFolderResults"
    },
    "TokenList": {
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "HIDDEN.",
          "$ref": "#/definitions/TokenListArray"
        }
      }
    },
    "TokenListArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TokenDataResponse"
      }
    },
    "TokenDataRequest": {
      "type": "object",
      "required": [
        "tokenName"
      ],
      "properties": {
        "tokenName": {
          "type": "string",
          "description": "required field. HIDDEN."
        },
        "roles": {
          "description": "required field when creates token for User. HIDDEN.",
          "type": "array",
          "items": {
            "type": "string",
            "role": {
              "type": "string"
            }
          }
        },
        "expirationDate": {
          "type": "string",
          "description": "optional field. HIDDEN."
        },
        "tokenType": {
          "type": "string",
          "description": "optional field. HIDDEN."
        }
      }
    },
    "TokenDataResponse": {
      "type": "object",
      "required": [
        "tokenName",
        "tokenType",
        "tokenValue"
      ],
      "properties": {
        "tokenName": {
          "type": "string",
          "description": "required field. HIDDEN."
        },
        "tokenType": {
          "type": "string",
          "description": "required field. HIDDEN."
        },
        "tokenValue": {
          "type": "string",
          "description": "required field. HIDDEN.",
          "format": "password"
        },
        "user": {
          "type": "string",
          "description": "is not provided in API Token for Agent. HIDDEN."
        },
        "roles": {
          "description": "is not provided in API Token for Agent. HIDDEN.",
          "type": "array",
          "items": {
            "type": "string",
            "role": {
              "type": "string"
            }
          }
        },
        "expirationDate": {
          "type": "string",
          "description": "optional field. HIDDEN."
        },
        "createdDate": {
          "type": "string",
          "description": "transient field. HIDDEN."
        },
        "lastUpdatedDate": {
          "type": "string",
          "description": "transient field. HIDDEN."
        }
      }
    },
    "Variables": {
      "properties": {
        "variables": {
          "description": "Key value map where key is pool variables in format %%\\\\PoolName\\AUTOVarInPool. HIDDEN.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "VariableNames": {
      "type": "object",
      "properties": {
        "variables": {
          "description": "Array of pool variables in format %%\\\\PoolName\\AUTOVarInPool. HIDDEN.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiThrowable": {
      "type": "object",
      "properties": {
        "localized_message": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "ApiThrowable"
    },
    "CtmvarDelResultItem": {
      "type": "object",
      "properties": {
        "del_pool_variables_error_info": {
          "$ref": "#/definitions/PoolVariablesErrorInfo"
        }
      },
      "title": "CtmvarDelResultItem"
    },
    "CtmvarDelResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmvarDelResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "CtmvarDelResults"
    },
    "CtmvarErrorInfo": {
      "type": "object",
      "properties": {
        "ctmvar_del_error_code": {
          "type": "string",
          "enum": [
            "FailedDeletingFromDB",
            "PoolNameInvalid",
            "UnKnownDelError",
            "UNRECOGNIZED"
          ]
        },
        "ctmvar_get_error_code": {
          "type": "string",
          "enum": [
            "FailedReadingFromDB",
            "PoolNameExpressionInvalid",
            "VarExpressionInvalidGet",
            "UnKnownGetError",
            "UNRECOGNIZED"
          ]
        },
        "ctmvar_set_error_code": {
          "type": "string",
          "enum": [
            "NoError",
            "VarNameTooLong",
            "VarNameInvalid",
            "VarExpressionTooLong",
            "VarExpressionInvalidSet",
            "VarNameIsReserved",
            "FailedWritingToDB",
            "UnKnownSetError",
            "UNRECOGNIZED"
          ]
        },
        "variable_name": {
          "type": "string"
        }
      },
      "title": "CtmvarErrorInfo"
    },
    "CtmvarGetResultItem": {
      "type": "object",
      "properties": {
        "get_pool_variables_error_info": {
          "$ref": "#/definitions/PoolVariablesErrorInfo"
        },
        "pool_variables_name_value": {
          "$ref": "#/definitions/PoolVariablesNameValue"
        }
      },
      "title": "CtmvarGetResultItem"
    },
    "CtmvarGetResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmvarGetResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "CtmvarGetResults"
    },
    "CtmvarResultItem": {
      "type": "object",
      "properties": {
        "full_line": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "variable_name": {
          "type": "string"
        },
        "variable_value": {
          "type": "string"
        }
      },
      "title": "CtmvarResultItem"
    },
    "CtmvarResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmvarResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "CtmvarResults"
    },
    "CtmvarSetResultItem": {
      "type": "object",
      "properties": {
        "set_pool_variables_error_info": {
          "$ref": "#/definitions/PoolVariablesErrorInfo"
        }
      },
      "title": "CtmvarSetResultItem"
    },
    "CtmvarSetResults": {
      "type": "object",
      "properties": {
        "completed_status": {
          "$ref": "#/definitions/ResultsStatus"
        },
        "error": {
          "$ref": "#/definitions/ApiThrowable"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmvarSetResultItem"
          }
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "CtmvarSetResults"
    },
    "PoolVariablesErrorInfo": {
      "type": "object",
      "properties": {
        "ctmvar_error_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmvarErrorInfo"
          }
        },
        "pool_name": {
          "type": "string"
        }
      },
      "title": "PoolVariablesErrorInfo"
    },
    "PoolVariablesName": {
      "type": "object",
      "properties": {
        "pool_name": {
          "type": "string"
        },
        "variable_name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "PoolVariablesName"
    },
    "PoolVariablesNameValue": {
      "type": "object",
      "properties": {
        "pool_name": {
          "type": "string"
        },
        "variable_name_value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableNameValue"
          }
        }
      },
      "title": "PoolVariablesNameValue"
    },
    "ResultsStatus": {
      "type": "object",
      "properties": {
        "display_usage": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "return_code": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ResultsStatus"
    },
    "VariableNameValue": {
      "type": "object",
      "properties": {
        "variable_name": {
          "type": "string"
        },
        "variable_value": {
          "type": "string"
        }
      },
      "title": "VariableNameValue"
    },
    "WorkloadPoliciesFileResults": {
      "type": "object",
      "properties": {
        "workLoadPoliciesFile": {
          "type": "string",
          "description": "The name of a specific workLoad policies file."
        },
        "successWorkpoliciesCount": {
          "type": "integer",
          "description": "Determines the number of successfully added workload policies."
        },
        "isDeployDescriptorValid": {
          "type": "boolean",
          "description": "Determines if the workLoad policies file file is a valid deploy descriptor file."
        },
        "addedWorkloadPolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "WorkloadPoliciesFileResults"
    },
    "SwaggerFile": {
      "type": "object",
      "title": "File"
    },
    "SwaggerInputStream": {
      "type": "object",
      "title": "InputStream"
    },
    "InputStreamResource": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/SwaggerFile"
        },
        "filename": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/SwaggerInputStream"
        },
        "open": {
          "type": "boolean"
        },
        "readable": {
          "type": "boolean"
        },
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "ItemInfoList": {
      "type": "object",
      "properties": {
        "itemInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemInfo"
          }
        }
      }
    },
    "ItemInfo": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "description": "the time the item was created on (in UTC, in ISO 8601 format)",
          "example": "2018-01-25T05:59:27.000Z"
        },
        "updatedTime": {
          "type": "string",
          "description": "the time the item was last updated (in UTC, in ISO 8601 format)",
          "example": "2018-01-25T05:59:27.000Z"
        },
        "updatedTimeUTC": {
          "type": "string",
          "description": "the time when the item was last updated as string without date format"
        },
        "username": {
          "type": "string",
          "description": "the username of the last user that updated the item"
        },
        "enabled": {
          "type": "boolean",
          "description": "indicates whether the item is enabled"
        },
        "siteStandard": {
          "type": "string",
          "description": "the Site Standard Name associested with this policy"
        },
        "siteStandardId": {
          "type": "string",
          "description": "the Site Standard ID associested with this policy"
        }
      }
    },
    "SiteStandardDetailsList": {
      "type": "object",
      "properties": {
        "siteStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardDetails"
          }
        }
      }
    },
    "SiteStandardDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "description": "the time the item was created on (in UTC, in ISO 8601 format)",
          "example": "2018-01-25T05:59:27.000Z"
        },
        "updatedTime": {
          "type": "string",
          "description": "the time the item was last updated (in UTC, in ISO 8601 format)",
          "example": "2018-01-25T05:59:27.000Z"
        },
        "username": {
          "type": "string",
          "description": "the username of the last user that updated the item"
        }
      }
    },
    "SiteStandardPolicyDetailsList": {
      "type": "object",
      "properties": {
        "siteStandardPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardPolicyDetails"
          }
        }
      }
    },
    "SiteStandardPolicyDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "description": "the time the item was created on (in UTC, in ISO 8601 format)",
          "example": "2018-01-25T05:59:27.000Z"
        },
        "updatedTime": {
          "type": "string",
          "description": "the time the item was last updated (in UTC, in ISO 8601 format)",
          "example": "2018-01-25T05:59:27.000Z"
        },
        "username": {
          "type": "string",
          "description": "the username of the last user that updated the item"
        },
        "siteStandard": {
          "type": "string",
          "description": "the Site Standard Name associested with this policy"
        },
        "status": {
          "type": "string",
          "description": "the status of the Site Standard Policy"
        }
      }
    },
    "SiteStandardChangeDetails": {
      "required": [
        "siteStandard"
      ],
      "properties": {
        "siteStandard": {
          "$ref": "#/definitions/SiteStandard"
        },
        "annotationDetails": {
          "$ref": "#/definitions/AnnotationDetails"
        },
        "overwrite": {
          "type": "boolean",
          "description": "In case of update, if the site standard was updated by another user since the last update, the update will fail unless this property is set to true"
        }
      }
    },
    "SiteStandardsList": {
      "type": "object",
      "properties": {
        "siteStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandard"
          }
        }
      }
    },
    "SiteStandard": {
      "type": "object",
      "required": [
        "info",
        "data"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/ItemInfo"
        },
        "data": {
          "$ref": "#/definitions/SiteStandardData"
        }
      }
    },
    "SiteStandardData": {
      "properties": {
        "conditionFormatParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionFormatPart"
          }
        },
        "fieldRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardFieldRule"
          }
        },
        "businessParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardBusinessParameter"
          }
        },
        "internalRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardInternalRule"
          }
        }
      }
    },
    "ConditionFormatPart": {
      "required": [
        "partType"
      ],
      "properties": {
        "partType": {
          "type": "string",
          "enum": [
            "SourceField",
            "TargetField",
            "FixedText"
          ]
        },
        "text": {
          "type": "string",
          "description": "Text to be used in condition format. To be used in FIXED_TEXT parts",
          "example": "-TO-"
        },
        "fieldName": {
          "type": "string",
          "enum": [
            "JobName",
            "MemName",
            "Application",
            "SubApplication",
            "NodeId",
            "Owner",
            "ParentFolder"
          ],
          "description": "The name of the field used in the part. To be used in SourceField and TargetField parts"
        }
      }
    },
    "SiteStandardFieldRule": {
      "required": [
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "type": "string",
          "description": "The name of the field this rule applies to"
        },
        "jobType": {
          "type": "string",
          "description": "The job type this rule applies for. Empty job type means it applies to all job types"
        },
        "conditions": {
          "type": "array",
          "description": "Job fields conditions to limit when this rule applies",
          "items": {
            "$ref": "#/definitions/SiteStandardCondition"
          }
        },
        "attributeConditions": {
          "type": "array",
          "description": "Multi-instance fields conditions to limit on what items this multi-instance rule applies. Should not be used in Must Have rules",
          "items": {
            "$ref": "#/definitions/SiteStandardCondition"
          }
        },
        "onStatement": {
          "description": "For on-do steps, specify the type of on statement this rule applies to. Omit this field for \"any on\"",
          "type": "string",
          "enum": [
            "EndedNotOK",
            "Ended",
            "EndedOK",
            "CompletionStatus",
            "ExecutionsCount",
            "RerunsCount",
            "OutputNotFound",
            "NotSubmitted",
            "AnyProgramStep",
            "EveryProgramStep",
            "SpecificStepName",
            "SpecificRangeName",
            "JOBRC",
            "OutputPattern",
            "FailuresCount",
            "SpecificStatement"
          ]
        },
        "doAction": {
          "description": "For on-do steps, specify the type of do action this rule applies to. Omit this field for \"any do\"",
          "type": "string",
          "enum": [
            "Notify",
            "Mail",
            "Remedy",
            "SetToOK",
            "SetToNotOK",
            "RerunJob",
            "StopCyclicRun",
            "SetVar",
            "OrderJob",
            "SysOut",
            "Condition",
            "CtbRule",
            "Restart"
          ]
        },
        "restriction": {
          "$ref": "#/definitions/SiteStandardRestriction"
        },
        "subFields": {
          "type": "array",
          "description": "Used for list fields to indicate restrictions for items in the list. When mustHave is true, it means the list must contain at least one item with sub-fields that match these restrictions.",
          "items": {
            "$ref": "#/definitions/SiteStandardFieldRule"
          }
        },
        "mustHave": {
          "type": "boolean",
          "description": "Specifies if this is a must-have rule. Relevant only for list fields. true indicates that the field must contain at least one item that matches this rule's restriction false (or missing) indicates that when the field has items, all of them must match the rule's restriction"
        }
      }
    },
    "SiteStandardInternalRule": {
      "required": [
        "ruleName"
      ],
      "properties": {
        "ruleName": {
          "type": "string"
        },
        "restriction": {
          "$ref": "#/definitions/SiteStandardRestriction"
        }
      }
    },
    "SiteStandardBusinessParameter": {
      "required": [
        "parameterName"
      ],
      "properties": {
        "parameterName": {
          "type": "string"
        },
        "restriction": {
          "$ref": "#/definitions/SiteStandardRestriction"
        },
        "validationErrorMessage": {
          "type": "string",
          "description": "The validation error message to show the user when this parameter is invalid.<br> If not specified, the default error message will be used."
        }
      }
    },
    "SiteStandardCondition": {
      "required": [
        "fieldName",
        "operator"
      ],
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "Equals",
            "DoesNotEqual",
            "GreaterThan",
            "LessThan",
            "Contains",
            "DoesNotContain",
            "IsEmpty",
            "IsNotEmpty",
            "StartsWith",
            "DoesNotStartsWith",
            "EndsWith",
            "DoesNotEndsWith"
          ]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SiteStandardRestriction": {
      "properties": {
        "isRequired": {
          "type": "boolean",
          "description": "Specifies if this field or business parameter must have a value. Relevant only for business parameters and simple fields with no sub-fields"
        },
        "possibleOptions": {
          "description": "List of possible values or possible patterns allowed for the field",
          "$ref": "#/definitions/SiteStandardPossibleOptions"
        },
        "possibleOperatorValueOptions": {
          "type": "array",
          "description": "List of possible operator-value pars",
          "items": {
            "$ref": "#/definitions/SiteStandardOperatorValueOptions"
          }
        },
        "minLength": {
          "type": "integer",
          "format": "int64"
        },
        "maxLength": {
          "type": "integer",
          "format": "int64"
        },
        "numericLimitation": {
          "type": "string",
          "description": "Limitation for numeric fields. Can include various ranges separated by comma, e.g. \"1, 5-8\""
        },
        "numericUnit": {
          "type": "string",
          "enum": [
            "Minutes",
            "Hours",
            "Days"
          ],
          "description": "In case of Rerun Interval field, specifies the unit the numeric limitation is referring to."
        },
        "isReadOnly": {
          "type": "boolean",
          "description": "Specifies if this field can be set by the user. Relevant only for boolean fields."
        },
        "allowUppercaseLetters": {
          "type": "boolean",
          "description": "Determines whether uppercase letters (A-Z) are allowed in the field value"
        },
        "allowLowercaseLetters": {
          "type": "boolean",
          "description": "Determines whether lowercase letters (a-z) are allowed in the field value"
        },
        "allowDigits": {
          "type": "boolean",
          "description": "Determines whether digits (0-9) are allowed in the field value"
        },
        "allowedCharacters": {
          "type": "string",
          "description": "A string contains all characters allowed in the field value (all digits or all letters shouldn't be listed here)"
        },
        "disallowedCharacters": {
          "type": "string",
          "description": "A string contains all characters not allowed in the field value. This should specified only if the other \"allowed...\" properties are not set"
        },
        "disallowedOptions": {
          "description": "List of possible values or possible patterns not allowed for the field",
          "$ref": "#/definitions/SiteStandardPossibleOptions"
        },
        "disallowedEnumValues": {
          "description": "List of enum values not allowed for the field",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardPossibleValue"
          }
        },
        "allowedEnumValues": {
          "description": "List of enum values that are allowed for the field. If this is empty, than any value is allowed if it is not in the disallowedEnumValues list and it matches the other restrictions. If it is not empty, only values listed in the list or values that matches the specified restrictions (if exists) are allowed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardPossibleValue"
          }
        },
        "checkForExistence": {
          "type": "boolean",
          "description": "Check if the field value need to be checked if it exists in the system. E.g. for node_id field - check that the specified host or host group exists in the system"
        },
        "defaultValue": {
          "type": "string"
        },
        "validationErrorMessage": {
          "type": "string",
          "description": "The validation error message to show the user when this rule is not met.<br> If not specified, the default error message will be used."
        }
      }
    },
    "SiteStandardPossibleOptions": {
      "properties": {
        "values": {
          "type": "array",
          "description": "List of possible values for the field. Cannot be specified together with patterns",
          "items": {
            "$ref": "#/definitions/SiteStandardPossibleValue"
          }
        },
        "patterns": {
          "type": "array",
          "description": "List of possible patterns for the field. Cannot be specified together with values",
          "items": {
            "$ref": "#/definitions/SiteStandardPossiblePattern"
          }
        }
      }
    },
    "SiteStandardOperatorValueOptions": {
      "required": [
        "operator"
      ],
      "properties": {
        "operator": {
          "type": "string",
          "enum": [
            "Equal",
            "NotEqual",
            "LessThan",
            "GreaterThan",
            "Even",
            "Odd"
          ]
        },
        "value": {
          "description": "Nomeric value, Even and Odd does not need value",
          "type": "integer"
        }
      }
    },
    "SiteStandardPossibleValue": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "SiteStandardPossiblePattern": {
      "required": [
        "patternParts"
      ],
      "properties": {
        "patternParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteStandardPatternPart"
          }
        },
        "description": {
          "type": "string",
          "description": "The description of this possible value. In case of simple text value, this is its display name (if not empty)"
        }
      }
    },
    "SiteStandardPatternPart": {
      "required": [
        "partType"
      ],
      "properties": {
        "partType": {
          "type": "string",
          "enum": [
            "FixedText",
            "Field",
            "BusinessParameter",
            "InternalRule",
            "FreeText"
          ]
        },
        "partValue": {
          "description": "The value of the part. Its meaning depends on the part type - For FixedText - it is the part's fixed text For Field - it is the field name For BusinessParameter - it is the parameter name For InternalRule - it is the internal rule name",
          "type": "string"
        }
      }
    },
    "SiteStandardPoliciesFileResults": {
      "type": "object",
      "properties": {
        "siteStandardPoliciesFile": {
          "type": "string",
          "description": "The name of a specific site standard policies file."
        },
        "successSiteStandardPoliciesCount": {
          "type": "integer",
          "description": "Determines the number of successfully added site standard policies."
        },
        "isDeployDescriptorValid": {
          "type": "boolean",
          "description": "Determines if the site standard policies file file is a valid deploy descriptor file."
        },
        "addedSiteStandardPolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddAgentParams": {
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname or alias of the agent machine.",
          "type": "string"
        },
        "port": {
          "description": "The agent's listening port.",
          "type": "integer",
          "format": "int32"
        },
        "tag": {
          "description": "The agent's tag.",
          "type": "string"
        },
        "sslState": {
          "description": "The agent's ssl State. HIDDEN.",
          "type": "string"
        },
        "persistentConnection": {
          "description": "Is the connection persistent or create each time it is needed. HIDDEN.",
          "type": "boolean"
        },
        "timeout": {
          "description": "maximum time in seconds to wait (default 60). HIDDEN",
          "default": 60,
          "type": "integer",
          "format": "int32"
        },
        "suppressPing": {
          "description": "Suppress ping action to added agent (default false). HIDDEN.",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "CtmagSetExtractServiceStatus": {
      "type": "object",
      "properties": {
        "aistatus": {
          "type": "string",
          "description": "the updated agent service status"
        }
      }
    },
    "SetAgentParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "parameter name"
        },
        "value": {
          "type": "string",
          "description": "parameter value"
        },
        "type": {
          "type": "string",
          "description": "parameter type"
        }
      }
    },
    "GetManifestParamsResult": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetManifestParams"
      }
    },
    "AgentTablesName": {
      "type": "object",
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetManifestParams": {
      "type": "object",
      "properties": {
        "category": {
          "description": "Holds the category of the entry",
          "type": "string"
        },
        "order": {
          "description": "Order of appearance",
          "type": "integer"
        },
        "productCode": {
          "description": "Three letters that are the product unique identifier",
          "type": "string"
        },
        "name": {
          "description": "The full official name of the product",
          "type": "string"
        },
        "installUri": {
          "description": "Specifies the path to the installation file",
          "type": "string"
        },
        "visible": {
          "description": "Determines whether or not the product should be visible in the web page",
          "type": "boolean"
        },
        "iconBase64": {
          "description": "Base64 representaion of image file",
          "type": "string"
        },
        "error": {
          "description": "Description of the specific error",
          "type": "string"
        },
        "errorCode": {
          "description": "Http response status code",
          "type": "string"
        },
        "fullName": {
          "description": "The full name",
          "type": "string"
        },
        "shortName": {
          "description": "The short name",
          "type": "string"
        },
        "subCategory": {
          "description": "The sub-category",
          "type": "string"
        },
        "keywords": {
          "description": "List of words that user can use when searching for a plugin",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "versions": {
          "description": "Includes all the versions numbers of the product that exist in the repository",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "$ref": "#/definitions/ManifestGroupObject"
        }
      }
    },
    "ExtractServicePropParams": {
      "type": "object",
      "properties": {
        "option": {
          "description": "Start with Agent startup",
          "type": "string"
        },
        "ruletable": {
          "description": "Rule table name",
          "type": "string"
        },
        "aidbglvl": {
          "description": "Extractor Diagnostic Level",
          "type": "string"
        },
        "filter": {
          "description": "Filter Key",
          "type": "string"
        },
        "exitpgm": {
          "description": "Exit Program Name",
          "type": "string"
        },
        "aitout": {
          "description": "Extractor Timeout",
          "type": "string"
        },
        "aistatus": {
          "description": "Service Status",
          "type": "string"
        }
      }
    },
    "ManifestGroupObject": {
      "type": "object",
      "properties": {
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestGroupItemObject"
          }
        }
      }
    },
    "ManifestGroupItemObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "iconBase64": {
          "type": "string"
        }
      }
    },
    "ProductSections": {
      "type": "object",
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductDescription"
          }
        },
        "productDescriptionUrl": {
          "type": "string",
          "description": "The product description. HIDDEN"
        }
      }
    },
    "ProductDescription": {
      "type": "object",
      "properties": {
        "productName": {
          "type": "string",
          "description": "The product name."
        },
        "productDescription": {
          "type": "string",
          "description": "The product description."
        },
        "isSectionOpen": {
          "type": "boolean",
          "description": "is Section open."
        },
        "staticText": {
          "type": "boolean",
          "description": "is static text section."
        },
        "tokenComponent": {
          "type": "boolean",
          "description": "is token component added."
        }
      }
    },
    "SetAgentParamsList": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SetAgentParams"
          }
        }
      }
    },
    "AddRemoteHostParams": {
      "properties": {
        "remotehost": {
          "description": "The remote host (name) which will execute the commands. REQUIRED.",
          "type": "string"
        },
        "port": {
          "description": "The remote host SSH port.",
          "type": "integer",
          "format": "int32"
        },
        "encryptAlgorithm": {
          "description": "The SSH encrypt algorithm to be used. HIDDEN.",
          "type": "string"
        },
        "compression": {
          "description": "Is compression used. HIDDEN.",
          "type": "boolean"
        },
        "authorize": {
          "description": "authorize SSL remote host while creating the remote host. HIDDEN.",
          "type": "boolean"
        },
        "agents": {
          "description": "Agents to execute the commands on. HIDDEN.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddServerParams": {
      "required": [
        "host",
        "ctm",
        "id"
      ],
      "properties": {
        "host": {
          "description": "The Control-M Server host name.",
          "type": "string"
        },
        "ctm": {
          "description": "The Control-M Server name.",
          "type": "string"
        },
        "id": {
          "description": "The id of the Control-M Server, 3 digits id",
          "type": "string"
        },
        "port": {
          "description": "The Control-M Server port number.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AgentInfo": {
      "type": "object",
      "required": [
        "nodeID",
        "ctm"
      ],
      "properties": {
        "nodeID": {
          "type": "string",
          "description": "The Agent nodeID"
        },
        "ctm": {
          "type": "string",
          "description": "The Control-M name"
        }
      }
    },
    "AgentInfoResult": {
      "type": "object",
      "required": [
        "nodeID",
        "ctm"
      ],
      "properties": {
        "nodeID": {
          "type": "string",
          "description": "The Agent nodeID"
        },
        "ctm": {
          "type": "string",
          "description": "The Control-M name"
        },
        "errMsg": {
          "type": "string",
          "description": "Error message that describes why action is failed"
        }
      }
    },
    "AgentSysParamSetData": {
      "type": "object",
      "properties": {
        "param": {
          "description": "The name of parameter.",
          "type": "string"
        },
        "value": {
          "description": "The new value for specified parameter.",
          "type": "string"
        },
        "table": {
          "description": "The table of the parameter.",
          "type": "string"
        },
        "validation": {
          "description": "The validation type of the parameter.",
          "type": "string"
        },
        "agents": {
          "description": "List of agents where parameter will be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInfo"
          }
        }
      }
    },
    "AgentsSysParamSetData": {
      "type": "object",
      "properties": {
        "paramsData": {
          "type": "array",
          "description": "The list of agent parameters set data.",
          "items": {
            "$ref": "#/definitions/AgentSysParamSetData"
          }
        }
      }
    },
    "AgentSysParamSetSuccessData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The success message that describes the action."
        },
        "unsuccessAgents": {
          "type": "array",
          "description": "List of the agents where parameter was not set.",
          "items": {
            "$ref": "#/definitions/AgentInfoResult",
            "description": "List of agents where parameter were not updated due to some exception."
          }
        }
      }
    },
    "AgentData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Agent name"
        },
        "host": {
          "type": "string",
          "description": "The Agent host"
        },
        "nodeID": {
          "type": "string",
          "description": "The Agent nodeID"
        },
        "ctm": {
          "type": "string",
          "description": "The Control-M name"
        },
        "ctmHost": {
          "type": "string",
          "description": "The Control-M Host"
        },
        "ctmCurrentState": {
          "type": "string",
          "description": "The Control-M Host State"
        },
        "currentState": {
          "type": "string",
          "description": "The Agent current state"
        },
        "status": {
          "type": "string",
          "description": "The Agent status"
        },
        "statusMessage": {
          "type": "string",
          "description": "The Agent status message"
        },
        "operatingSystem": {
          "type": "string",
          "description": "The Agent operating System"
        },
        "platform": {
          "type": "string",
          "description": "The Agent platform"
        },
        "version": {
          "type": "string",
          "description": "The Agent version"
        },
        "lastUpdate": {
          "type": "string",
          "description": "The Agent last update"
        },
        "communicationVersion": {
          "type": "string",
          "description": "The Agent communication version"
        },
        "tag": {
          "type": "string",
          "description": "The Agent tag"
        },
        "sslState": {
          "type": "string",
          "description": "The Agent ssl state"
        },
        "hostGroups": {
          "type": "string",
          "description": "The Agent host groups"
        },
        "plugins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginData"
          }
        }
      }
    },
    "AgentDetails": {
      "type": "object",
      "properties": {
        "nodeid": {
          "type": "string",
          "description": "agent machine"
        },
        "status": {
          "type": "string",
          "description": "agent status"
        },
        "hostgroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list of hostgroups names containing the agent"
        },
        "version": {
          "type": "string",
          "description": "agent version string i.e. - 9.0.20.080"
        },
        "operatingSystem": {
          "type": "string",
          "description": "agent operating system long name i.e - Microsoft Windows Server 2016  (Build 14393)"
        }
      }
    },
    "AgentDetailsList": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentDetails"
          }
        }
      }
    },
    "AgentInGroupParams": {
      "type": "object",
      "required": [
        "host"
      ],
      "properties": {
        "host": {
          "type": "string",
          "description": "The hostname of the agent."
        },
        "hostgroupAgentParticipation": {
          "$ref": "#/definitions/HostgroupAgentParticipation",
          "description": "The host condition. HIDDEN."
        }
      }
    },
    "AgentInGroupParamsList": {
      "type": "object",
      "properties": {
        "agentslist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInGroupParams"
          }
        }
      }
    },
    "AgentInHostgroup": {
      "type": "object",
      "required": [
        "host"
      ],
      "properties": {
        "host": {
          "type": "string",
          "description": "The hostname of the agent."
        },
        "tag": {
          "type": "string",
          "description": "Host Group tag. HIDDEN."
        },
        "hostgroupAgentParticipation": {
          "$ref": "#/definitions/HostgroupAgentParticipation",
          "description": "The host condition. HIDDEN."
        }
      }
    },
    "HostgroupProperties": {
      "type": "object",
      "properties": {
        "agentslist": {
          "type": "array",
          "description": "Agents list. HIDDEN.",
          "items": {
            "$ref": "#/definitions/AgentInGroupParams"
          }
        },
        "tag": {
          "type": "string",
          "description": "Host Group tag. HIDDEN."
        }
      }
    },
    "HostGroupData": {
      "type": "object",
      "description": "Host group data",
      "properties": {
        "hostgroup": {
          "type": "string",
          "description": "Host Group name"
        },
        "tag": {
          "type": "string",
          "description": "Host Group tag"
        },
        "agentslist": {
          "description": "Agents list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInGroupParams"
          }
        }
      }
    },
    "HostGroupsDataList": {
      "type": "array",
      "description": "List of all Host groups.",
      "items": {
        "$ref": "#/definitions/HostGroupData"
      }
    },
    "AgentMngAuth": {
      "type": "object",
      "properties": {
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "Agent": {
          "type": "string",
          "description": "agent name"
        },
        "Privilege": {
          "type": "string",
          "description": "access level (full, update, browse)"
        }
      }
    },
    "AgentsDataList": {
      "type": "array",
      "description": "List of all Agents.",
      "items": {
        "$ref": "#/definitions/AgentData"
      }
    },
    "AgentsInGroupListResult": {
      "type": "array",
      "description": "List of the items remained after the action.",
      "items": {
        "$ref": "#/definitions/AgentInGroupParams",
        "description": "Agent in group details."
      }
    },
    "AgentsInGroupSuccessData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The success message that describes the performed action."
        },
        "agents": {
          "type": "array",
          "description": "List of the items remained after the action.",
          "items": {
            "$ref": "#/definitions/AgentInGroupParams",
            "description": "Agent in group details."
          }
        }
      }
    },
    "AgentDebugInformation": {
      "type": "object",
      "required": [
        "diagnosticLevel",
        "communicationTrace"
      ],
      "properties": {
        "diagnosticLevel": {
          "type": "integer",
          "description": "Level of application logging. HIDDEN"
        },
        "communicationTrace": {
          "type": "boolean",
          "description": "Indicates whether communication data is collected. HIDDEN"
        }
      }
    },
    "AllowedJobActions": {
      "type": "object",
      "properties": {
        "ViewProperties": {
          "type": "boolean",
          "description": "True if Properties action is allowed"
        },
        "Documentation": {
          "type": "boolean",
          "description": "True if Documentation action is allowed"
        },
        "Log": {
          "type": "boolean",
          "description": "True if Log action is allowed"
        },
        "Statistics": {
          "type": "boolean",
          "description": "True if Statistics action is allowed"
        },
        "ViewOutputList": {
          "type": "boolean",
          "description": "True if ViewOutputList action is allowed"
        },
        "ViewJcl": {
          "type": "boolean",
          "description": "True if ViewJcl action is allowed"
        },
        "Why": {
          "type": "boolean",
          "description": "True if Why action is allowed"
        },
        "Hold": {
          "type": "boolean",
          "description": "True if Hold action is allowed"
        },
        "Free": {
          "type": "boolean",
          "description": "True if Free action is allowed"
        },
        "Confirm": {
          "type": "boolean",
          "description": "True if Confirm action is allowed"
        },
        "Rerun": {
          "type": "boolean",
          "description": "True if Rerun action is allowed"
        },
        "React": {
          "type": "boolean",
          "description": "True if React action is allowed"
        },
        "Restart": {
          "type": "boolean",
          "description": "True if Restart action is allowed"
        },
        "Kill": {
          "type": "boolean",
          "description": "True if Kill action is allowed"
        },
        "Bypass": {
          "type": "boolean",
          "description": "True if Bypass action is allowed"
        },
        "Delete": {
          "type": "boolean",
          "description": "True if Delete action is allowed"
        },
        "Undelete": {
          "type": "boolean",
          "description": "True if Undelete action is allowed"
        },
        "SetToOk": {
          "type": "boolean",
          "description": "True if SetToOk action is allowed"
        },
        "EditProperties": {
          "type": "boolean",
          "description": "True if EditProperties action is allowed"
        },
        "EditJcl": {
          "type": "boolean",
          "description": "True if EditJcl action is allowed"
        }
      }
    },
    "AllowedJobs": {
      "type": "object",
      "properties": {
        "Included": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TermGroup"
          },
          "description": "list of including term Groups, combined by OR"
        },
        "Excluded": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TermGroup"
          },
          "description": "list of excluding term Groups, combined by OR"
        }
      }
    },
    "As2KeyData": {
      "type": "object",
      "properties": {
        "as2Id": {
          "type": "string",
          "description": "as2 id HIDDEN"
        },
        "certificate": {
          "type": "string",
          "description": "partners certificate alias HIDDEN"
        },
        "destinationFolder": {
          "type": "string",
          "description": "AS2 destination folder HIDDEN"
        }
      }
    },
    "AssociateData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "associate typed REQUIRED"
        },
        "name": {
          "type": "string",
          "description": "associate name REQUIRED"
        }
      }
    },
    "AuthenticationData": {
      "type": "object",
      "properties": {
        "ControlM": {
          "$ref": "#/definitions/ControlMAuthenticationData"
        },
        "ExternalProvider": {
          "$ref": "#/definitions/ExternalProviderAuthenticationData"
        }
      }
    },
    "ClientAccessPrivilegeCategory": {
      "type": "object",
      "properties": {
        "ControlmWebClientAccess": {
          "type": "string",
          "description": "Control-M Web clientaccess level (None, Full)"
        },
        "SelfServiceAccess": {
          "type": "string",
          "description": "Control-M Self Service access level (None, Full)"
        },
        "WorkloadChangeManagerAccess": {
          "type": "string",
          "description": "Control-M Workload Change Manager access level (None, Full)"
        },
        "UtilitiesAccess": {
          "type": "string",
          "description": "Control-M, Utilitiesm EM API, BIM Web, UI access level (None, Full)"
        },
        "ApplicationIntegratorAccess": {
          "type": "string",
          "description": "Control-M Application Integrator access level (None, Full)"
        },
        "AutomationAPIAccess": {
          "type": "string",
          "description": "Control-M Automation API access level (None, Full)"
        },
        "WorkflowInsightsAccess": {
          "type": "string",
          "description": "Control-M Workflow Insights access level (None, Full)"
        }
      }
    },
    "ConfigurationManagerPrivilegeCategory": {
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string",
          "description": "Authorization access level (None, Browse, Update, Full)"
        },
        "ConfigurationManagerAccess": {
          "type": "string",
          "description": "Control-M Configuration Manager access level (None, Full)"
        },
        "Configuration": {
          "type": "string",
          "description": "Configuration access level (None, Browse, Update, Full)"
        },
        "Operation": {
          "type": "string",
          "description": "Operation access level (None, Browse, Update, Full)"
        },
        "Database": {
          "type": "string",
          "description": "Database Maintenance access level (None, Browse, Update, Full)"
        },
        "ControlmSecurity": {
          "type": "string",
          "description": "Security access level (None, Browse, Update, Full)"
        }
      }
    },
    "PluginData": {
      "type": "object",
      "properties": {
        "applicationType": {
          "type": "string",
          "description": "The application type"
        },
        "applicationVersion": {
          "type": "string",
          "description": "The application version"
        },
        "pluginVersion": {
          "type": "string",
          "description": "The plugin version"
        },
        "version": {
          "type": "string",
          "description": "The version"
        },
        "currentState": {
          "type": "string",
          "description": "The current state"
        },
        "status": {
          "type": "string",
          "description": "The status"
        },
        "statusMessage": {
          "type": "string",
          "description": "The status message"
        },
        "lastUpdate": {
          "type": "string",
          "description": "The last update"
        },
        "b2bActivated": {
          "type": "string",
          "description": "The B2B activated indication"
        }
      }
    },
    "PluginMngAuth": {
      "type": "object",
      "properties": {
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "Agent": {
          "type": "string",
          "description": "agent name"
        },
        "PluginType": {
          "type": "string",
          "description": "plugin type"
        },
        "Privilege": {
          "type": "string",
          "description": "access level (full, update, browse)"
        }
      }
    },
    "ControlMAuthenticationData": {
      "type": "object",
      "properties": {
        "Password": {
          "type": "string",
          "description": "password or secret"
        },
        "PasswordExpirationDays": {
          "type": "integer",
          "description": "number of days until the password expires"
        },
        "ChangePasswordAtNextLogin": {
          "type": "boolean",
          "description": "should password be changed in next login"
        },
        "LockAccount": {
          "type": "boolean",
          "description": "lock account"
        },
        "AccountLockedOnDate": {
          "type": "string",
          "description": "account locked on date"
        }
      }
    },
    "CPMngAuth": {
      "type": "object",
      "properties": {
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "Agent": {
          "type": "string",
          "description": "agent name"
        },
        "PluginType": {
          "type": "string",
          "description": "plugin type"
        },
        "Name": {
          "type": "string",
          "description": "connection profile name"
        },
        "Privilege": {
          "type": "string",
          "description": "access level (full, update, browse)"
        }
      }
    },
    "CtmDetails": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The unique name of the Control-M Server.",
          "type": "string"
        },
        "host": {
          "description": "The hostname of the Control-M Server is running on.",
          "type": "string"
        },
        "state": {
          "description": "Control-M Server state [up|down].",
          "type": "string"
        },
        "message": {
          "description": "Control-M Server message describing the communication status.",
          "type": "string"
        },
        "version": {
          "description": "Control-M Server version.",
          "type": "string"
        }
      }
    },
    "CtmDetailsList": {
      "type": "array",
      "description": "List of all the Control-M Servers name and host in the system.",
      "items": {
        "$ref": "#/definitions/CtmDetails"
      }
    },
    "CtmAdvancedDetails": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The unique name of the Control-M Server.",
          "type": "string"
        },
        "host": {
          "description": "The hostname of the Control-M Server is running on.",
          "type": "string"
        },
        "state": {
          "description": "Control-M Server state [up|down].",
          "type": "string"
        },
        "message": {
          "description": "Control-M Server message describing the communication status.",
          "type": "string"
        },
        "version": {
          "description": "Control-M Server version.",
          "type": "string"
        },
        "ctmType": {
          "description": "Control-M Server ctm Type. [Distributed|\"z/OS]",
          "type": "string"
        },
        "type": {
          "description": "Control-M Server Type. [CTM_Server]",
          "type": "string"
        },
        "cmcManaged": {
          "description": "Control-M Server Type. [Y|N]",
          "type": "string"
        },
        "currentState": {
          "description": "Control-M Server Type. [UP|Unknown]",
          "type": "string"
        },
        "adminAgentStatus": {
          "description": "Control-M Server Type. [Active|Not Responding]",
          "type": "string"
        }
      }
    },
    "CtmAdvancedDetailsList": {
      "type": "array",
      "description": "List of all the Control-M Servers name and host in the system.",
      "items": {
        "$ref": "#/definitions/CtmAdvancedDetails"
      }
    },
    "ExternalProviderAuthenticationData": {
      "type": "object",
      "properties": {
        "LdapUserAndDomain": {
          "type": "string",
          "description": "ldap user and domain"
        }
      }
    },
    "PgpTemplateData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Template name HIDDEN"
        },
        "executableFullPath": {
          "type": "string",
          "description": "Executable Full Path HIDDEN"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "description": "Exit code (default 0) HIDDEN"
        },
        "passphrase": {
          "type": "string",
          "description": "passphrase HIDDEN",
          "x-prompt": "Passphrase VALIDATE"
        },
        "recipient": {
          "type": "string",
          "description": "Recipient HIDDEN"
        },
        "encryptionAttributes": {
          "type": "string",
          "description": "Encryption Attributes HIDDEN"
        },
        "decryptionAttributes": {
          "type": "string",
          "description": "Decryption Attributes HIDDEN"
        }
      }
    },
    "HostProperties": {
      "type": "object",
      "properties": {
        "hostName": {
          "type": "string",
          "description": "Host Name HIDDEN",
          "default": "Local"
        },
        "osType": {
          "type": "string",
          "description": "OS Type (Windows/Unix/MVS/OS400/Tandem/OpenVMS/OS2200) HIDDEN"
        },
        "user": {
          "type": "string",
          "description": "User Name HIDDEN"
        },
        "password": {
          "type": "string",
          "description": "Password HIDDEN"
        },
        "protocol": {
          "type": "string",
          "description": "Protocol Name (Local/FTP/SFTP) HIDDEN"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "description": "Port HIDDEN"
        },
        "ssl": {
          "type": "boolean",
          "description": "FTP Over SSL/TLS HIDDEN",
          "default": false
        },
        "sslImplicit": {
          "type": "boolean",
          "description": "SSL Implicit HIDDEN",
          "default": false
        },
        "cccCommand": {
          "type": "boolean",
          "description": "Clear Command Channel (CCC) HIDDEN",
          "default": false
        },
        "cdcCommand": {
          "type": "boolean",
          "description": "Clear Data Channel (CDC) HIDDEN",
          "default": false
        },
        "sslLevel": {
          "type": "string",
          "description": "SSL Security Level (No Authentication/Server Authentication/Client-Server Authentication) HIDDEN"
        },
        "passive": {
          "type": "boolean",
          "description": "FTP Passive HIDDEN",
          "default": false
        },
        "substituteIpAddress": {
          "type": "boolean",
          "description": "Substitute IP Address HIDDEN",
          "default": false
        },
        "extendedPassiveMode": {
          "type": "boolean",
          "description": "Extrernded Passive Mode (EPSV) HIDDEN",
          "default": false
        },
        "sshCompression": {
          "type": "boolean",
          "description": "SSH Compression HIDDEN",
          "default": false
        },
        "logicalKeyName": {
          "type": "string",
          "description": "Private Key Name HIDDEN",
          "default": ""
        },
        "passphrase": {
          "type": "string",
          "description": "Key Passphrase HIDDEN",
          "default": ""
        }
      }
    },
    "MftConfigurationData": {
      "type": "object",
      "properties": {
        "connectionTimeoutInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Connection timeout (seconds) HIDDEN"
        },
        "connectionRetries": {
          "type": "integer",
          "format": "int32",
          "description": "Number of connection retries HIDDEN"
        },
        "connectionTimeBetweenRetriesInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Time between connection retries (seconds) HIDDEN"
        },
        "debugLevel": {
          "type": "integer",
          "format": "int32",
          "description": "MFT debug level (0-5) HIDDEN"
        },
        "pgpTempDir": {
          "type": "string",
          "description": "PGP temporary directory HIDDEN"
        },
        "sslDebugTrace": {
          "type": "boolean",
          "description": "Enable SSL debug trace HIDDEN"
        },
        "pamAuthentication": {
          "type": "boolean",
          "description": "Use PAM password authentication HIDDEN"
        },
        "proxyIsInUse": {
          "type": "boolean",
          "description": "Use web proxy HIDDEN"
        },
        "proxyHost": {
          "type": "string",
          "description": "Proxy host HIDDEN"
        },
        "proxyPort": {
          "type": "integer",
          "format": "int32",
          "description": "Proxy port HIDDEN"
        },
        "proxyUser": {
          "type": "string",
          "description": "Proxy user HIDDEN"
        },
        "proxyPassword": {
          "type": "string",
          "description": "Proxy password HIDDEN"
        },
        "fileWatcherSearchInterval": {
          "type": "integer",
          "format": "int32",
          "description": "File watch search interval (seconds) HIDDEN"
        },
        "fileWatcherStaticIterations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of iterations while file is static HIDDEN"
        },
        "fileWatcherCheckFileIsInUse": {
          "type": "boolean",
          "description": "Check that file is not in use HIDDEN"
        },
        "fileActionsRetriesIntervalInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "File action retry interval (seconds) HIDDEN"
        },
        "fileActionsRetriesNum": {
          "type": "integer",
          "format": "int32",
          "description": "Number of file action retries HIDDEN"
        }
      }
    },
    "ZosTemplateData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Template name HIDDEN"
        },
        "recordFormat": {
          "type": "string",
          "description": "Record format HIDDEN"
        },
        "logicalRecordLength": {
          "type": "integer",
          "format": "int32",
          "description": "Logical record length HIDDEN"
        },
        "blockSize": {
          "type": "integer",
          "format": "int32",
          "description": "Block Size HIDDEN"
        },
        "translationTable": {
          "type": "string",
          "description": "Translation table HIDDEN"
        },
        "transferMode": {
          "type": "string",
          "description": "Transfer mode HIDDEN"
        },
        "smsManagmentClass": {
          "type": "string",
          "description": "Management class HIDDEN"
        },
        "allocationUnits": {
          "type": "string",
          "description": "Allocation units HIDDEN"
        },
        "volume": {
          "type": "string",
          "description": "Volume HIDDEN"
        },
        "unit": {
          "type": "string",
          "description": "Unit HIDDEN"
        },
        "primaryAllocation": {
          "type": "integer",
          "format": "int32",
          "description": "Primary Allocation HIDDEN"
        },
        "secondaryAllocation": {
          "type": "integer",
          "format": "int32",
          "description": "Secondary allocation HIDDEN"
        },
        "smsDataClass": {
          "type": "string",
          "description": "Data class HIDDEN"
        },
        "dbcsEncoding": {
          "type": "string",
          "description": "DBCS name HIDDEN"
        },
        "transferToUniqueFile": {
          "type": "boolean",
          "description": "Transfer to unique file HIDDEN"
        },
        "additionalOptionsHost1": {
          "type": "string",
          "description": "Additional options host 1 HIDDEN"
        },
        "additionalOptionsHost2": {
          "type": "string",
          "description": "Additional options host 1 HIDDEN"
        }
      }
    },
    "ExternalUserData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "external user name REQUIRED:addExternalUser,addExternalUserForSite | HIDDEN"
        },
        "email": {
          "type": "string",
          "description": "user email REQUIRED:addExternalUser,addExternalUserForSite | HIDDEN"
        },
        "company": {
          "type": "string",
          "description": "user's company REQUIRED:addExternalUser,addExternalUserForSite | HIDDEN"
        },
        "password": {
          "type": "string",
          "description": "user password HIDDEN:updateExternalUser,updateExternalUserForSite",
          "x-prompt": "Password VALIDATE"
        },
        "description": {
          "type": "string",
          "description": "user description HIDDEN"
        },
        "phoneNumber": {
          "type": "string",
          "description": "external user phone number HIDDEN"
        },
        "sshKey": {
          "type": "string",
          "description": "SSH key string HIDDEN"
        },
        "as2Key": {
          "$ref": "#/definitions/As2KeyData",
          "description": "AS2 key string HIDDEN"
        },
        "isLocked": {
          "type": "boolean",
          "description": "indicates whether the user account is locked HIDDEN"
        },
        "lockReason": {
          "type": "string",
          "description": "provides the reason for locking the user account HIDDEN"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "indicates whether a password change is required at next login HIDDEN"
        },
        "passwordNeverExpires": {
          "type": "boolean",
          "description": "indicates whether the user's password is set to never expire HIDDEN"
        }
      }
    },
    "MFTExternalUserProjectionData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "external user name"
        },
        "company": {
          "type": "string",
          "description": "user's company"
        },
        "isLocked": {
          "type": "boolean",
          "description": "indicates whether the user account is locked"
        },
        "lockReason": {
          "type": "string",
          "description": "provides the reason for locking the user account"
        },
        "allowedFoldersNames": {
          "type": "array",
          "description": "users's allowed folder names",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MFTUserGroupProjectionData": {
      "type": "object",
      "properties": {
        "allowedFoldersNames": {
          "type": "array",
          "description": "user's allowed folder names",
          "items": {
            "type": "string"
          }
        },
        "externalUsers": {
          "type": "array",
          "description": "external users names",
          "items": {
            "type": "string"
          }
        },
        "ldapGroups": {
          "type": "array",
          "description": "ldap groups names",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "user group name"
        }
      }
    },
    "MFTFolderProjectionProperties": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the folder.",
          "type": "string"
        },
        "allowedInternalUserNames": {
          "description": "Authorized Internal Users.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedUserNames": {
          "description": "Authorized External Users.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedGroupNames": {
          "description": "Array of allowed group names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessType": {
          "type": "string",
          "description": "Folder's access type (Limited, Unlimited)."
        }
      }
    },
    "MFTFolderProjectionData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the folder",
          "type": "string"
        },
        "authorizedInternalUsers": {
          "description": "Authorized Internal Users",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authorizedExternalUsersAndGroups": {
          "description": "Authorized External Users And User Groups",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessType": {
          "type": "string",
          "description": "Folder's access type (Limited, Unlimited)."
        }
      }
    },
    "FolderPropertiesData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the folder. REQUIRED:addMFTFolder,addMFTFolderForSite | HIDDEN",
          "type": "string"
        },
        "authorizedInternalUsers": {
          "description": "Authorized Internal Users. HIDDEN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authorizedExternalUsersAndGroups": {
          "description": "Authorized External Users And User Groups. HIDDEN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteFilesAfterDownload": {
          "type": "boolean",
          "description": "Delete file after downloaded from incoming folder. HIDDEN"
        },
        "notifyByEmailWhenFileArrive": {
          "type": "boolean",
          "description": "Send email notification to external users when a new file arrives. HIDDEN"
        },
        "retentionPolicy": {
          "type": "integer",
          "format": "int64",
          "description": "Retention Time in hours. HIDDEN"
        },
        "sizeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Size limit for folder (in Gigabyte). HIDDEN"
        },
        "allowedFilePattern": {
          "type": "string",
          "description": "allowed file pattern wildcard. HIDDEN"
        },
        "blockedFilePattern": {
          "type": "string",
          "description": "blocked file pattern wildcard. HIDDEN"
        },
        "accessType": {
          "type": "string",
          "description": "Folder's access type (Limited, Unlimited). HIDDEN"
        }
      }
    },
    "FolderAuth": {
      "type": "object",
      "properties": {
        "Privilege": {
          "type": "string",
          "description": "access level (Full, Update, Browse)"
        },
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "Library": {
          "type": "string",
          "description": "job application"
        },
        "Folder": {
          "type": "string",
          "description": "job sub application"
        },
        "Order": {
          "type": "boolean",
          "description": "Allow ordering"
        },
        "Run": {
          "type": "boolean",
          "description": "Allow ordering"
        },
        "Jobs": {
          "$ref": "#/definitions/JobLevelAuth",
          "description": "HIDDEN"
        }
      }
    },
    "HostgroupAgentParticipation": {
      "type": "object",
      "required": [
        "event"
      ],
      "properties": {
        "event": {
          "type": "string",
          "description": "The event name."
        },
        "orderDate": {
          "type": "string",
          "description": "Odate dd-mm-yy or ******"
        }
      }
    },
    "JobLevelAuth": {
      "type": "object",
      "properties": {
        "Privilege": {
          "type": "string",
          "description": "access level (Full, Update, Browse)"
        },
        "Application": {
          "type": "string",
          "description": "job application"
        },
        "SubApplication": {
          "type": "string",
          "description": "job sub application"
        }
      }
    },
    "UpgradeNotification": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "KeyValue": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique key"
        },
        "value": {
          "type": "string",
          "description": "Any value in string form."
        },
        "defaultValue": {
          "type": "string",
          "description": "The default value if exist."
        },
        "validation": {
          "type": "string",
          "description": "The validation type number."
        },
        "category": {
          "type": "string",
          "description": "The category of the parameter."
        },
        "description": {
          "type": "string",
          "description": "The description of the parameter."
        },
        "errMsg": {
          "type": "string",
          "description": "The error message of the parameter."
        },
        "verification": {
          "type": "string",
          "description": "The verification type of the parameter."
        },
        "table": {
          "type": "string",
          "description": "The table the parameter belongs to."
        },
        "type": {
          "type": "string",
          "description": "The parameter type."
        },
        "limits": {
          "type": "string",
          "description": "The validation limits of the parameter."
        }
      }
    },
    "SamlStatus": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "The value of saml mode"
        }
      }
    },
    "UserAdditionalProperties": {
      "type": "object",
      "properties": {
        "memberOfGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of role names"
        },
        "authentication": {
          "$ref": "#/definitions/AuthenticationData",
          "description": "user authentication"
        },
        "isExternalUser": {
          "type": "boolean"
        }
      }
    },
    "SystemSettingKeyValue": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique key"
        },
        "value": {
          "type": "string",
          "description": "Any value in string form."
        }
      }
    },
    "SystemSettingKeyValueComponent": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique key"
        },
        "value": {
          "type": "string",
          "description": "Any value in string form."
        },
        "component": {
          "type": "string",
          "description": "Any value in string form."
        }
      }
    },
    "SystemSettingProperty": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "Any value in string form."
        }
      }
    },
    "SystemSettingAnnotationProperty": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "KeyValueListResult": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/KeyValue"
      }
    },
    "KeyValueType": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique key"
        },
        "value": {
          "type": "string",
          "description": "Any value in string form."
        },
        "defaultValue": {
          "type": "string",
          "description": "The default value if exist."
        },
        "type": {
          "type": "string",
          "description": "the type of the request."
        }
      }
    },
    "KeyValueTypeListResult": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/KeyValueType"
      }
    },
    "MonitoringPrivilegeCategory": {
      "type": "object",
      "properties": {
        "Alert": {
          "type": "string",
          "description": "Alerts access level (None, Browse, Update, Full)"
        },
        "ViewpointArchive": {
          "type": "string",
          "description": "Archived Viewpoints access level (None, Browse, Update, Full)"
        }
      }
    },
    "PingAgentParams": {
      "required": [
        "discover",
        "timeout"
      ],
      "properties": {
        "discover": {
          "description": "Discover parameter when true the agent will be added to the Control-M. HIDDEN",
          "type": "boolean",
          "default": false
        },
        "timeout": {
          "description": "maximum time in seconds to wait (default 60). HIDDEN",
          "default": 60,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PlanningPrivilegeCategory": {
      "type": "object",
      "properties": {
        "PeriodicalStatistics": {
          "type": "string",
          "description": "Periodical Statistics access level (None, Browse, Update, Full)"
        },
        "ForecastOrBatchImpactManagerConfig": {
          "type": "string",
          "description": "Forecast/BIM Configuration access level (None, Browse, Update, Full)"
        },
        "PromotionRules": {
          "type": "string",
          "description": "Promotion Rules access level (None, Browse, Update, Full)"
        },
        "PromoteAction": {
          "type": "string",
          "description": "Promote Action access level (None, Browse, Update, Full)"
        }
      }
    },
    "PrivilegeName": {
      "type": "object",
      "properties": {
        "Privilege": {
          "type": "string",
          "description": "access level (none, full, update, browse)"
        },
        "Name": {
          "type": "string",
          "description": "pattern value"
        }
      }
    },
    "PrivilegeNameControlm": {
      "type": "object",
      "properties": {
        "Privilege": {
          "type": "string",
          "description": "access level (Full, Update, Browse)"
        },
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "Name": {
          "type": "string",
          "description": "property name"
        }
      }
    },
    "Privileges": {
      "type": "object",
      "properties": {
        "ClientAccess": {
          "$ref": "#/definitions/ClientAccessPrivilegeCategory"
        },
        "ConfigurationManager": {
          "$ref": "#/definitions/ConfigurationManagerPrivilegeCategory"
        },
        "Monitoring": {
          "$ref": "#/definitions/MonitoringPrivilegeCategory"
        },
        "Planning": {
          "$ref": "#/definitions/PlanningPrivilegeCategory"
        },
        "Tools": {
          "$ref": "#/definitions/ToolsPrivilegeCategory"
        },
        "ViewpointManager": {
          "$ref": "#/definitions/ViewpointManagerPrivilegeCategory"
        }
      }
    },
    "ActionsAuthRecord": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string",
          "enum": [
            "EM",
            "CTM_Server",
            "CTM_Agent",
            "CTM_CM"
          ],
          "description": "component in which the action sent - Possible Values - EM, CTM_Server, CTM_Agent, CTM_CM"
        },
        "action": {
          "type": "string",
          "enum": [
            "Collect_measurements_and_reports_request",
            "Set_agent_debug_info_request",
            "Get_agent_debug_info_request",
            "Set_agent_config_params_request",
            "Get_agent_config_params_request",
            "Ctmag_set_cert_request",
            "Ctmag_get_csr_request",
            "Ctmag_get_cert_expire_date_request",
            "Ctmag_get_config_request",
            "Ctmagent_recycle_request",
            "Ctmag_get_locale_list_request",
            "Ctmag_update_config_request",
            "Authorize_remote_host_request",
            "Ctmsap_update_ew_config_request",
            "Ctmsap_get_ew_config_request",
            "Ctmcm_update_extract_rule_table_request",
            "Ctmcm_get_extract_rule_table_request",
            "Ctmcm_get_templates_request",
            "Ctmcm_get_accounts_request",
            "Ctmcm_add_account_request",
            "Ctmcm_update_account_request",
            "Ctmcm_delete_account_request",
            "Ctmcm_validate_account_request",
            "Ctmcm_get_info_request",
            "Ctmcm_mass_update_request",
            "Ctmcm_get_config_request",
            "Ctmcm_update_config_request",
            "Ctmsap_get_accounts_names_request",
            "Ctmsap_get_sap_interception_criteria_request",
            "Ctmsap_update_sap_interception_criteria_request",
            "Ctmsap_get_ctm_interception_rules_request",
            "Ctmsap_update_ctm_interception_rules_request",
            "Ctmsap_get_extract_rules_request",
            "Ctmsap_update_extract_rules_request",
            "Ctmsap_get_user_exit_files_request",
            "Ctmsap_get_xtractor_config_request",
            "Ctmsap_update_xtractor_config_request",
            "Ctmsap_check_XBP2_enable_request",
            "Ctmsap_get_sap_calendars_request",
            "Ctmsap_import_sap_calendar_request",
            "Ctmsap_get_ew_events_names_request",
            "Ctmsap_create_profile_request",
            "Ctmsap_set_profile_request",
            "Ctmsap_delete_profile_request",
            "Ctmsap_get_profiles_request",
            "Ctmsap_get_profile_criteria_request",
            "Ctmsap_activate_profile_request",
            "Ctmag_set_extract_service_status_request",
            "Ctmag_update_extract_service_prop_request",
            "Ctmag_get_extract_service_prop_request",
            "Ctmcm_jndi_browse_request",
            "Ctmcm_load_ejb_request",
            "Ctmcm_get_encryption_type_request",
            "Ctmcm_get_known_hosts_request",
            "Ctmcm_update_aft_server_configuration_request",
            "Ctmcm_get_aft_server_configuration_request",
            "Ctmcm_verify_local_path_request",
            "Ctmcm_mft_b2b_rest_patch_request",
            "Ctmcm_get_as2_encryption_algorithms_request",
            "Ctmcm_get_as2_signature_algorithms_request",
            "Ctmcm_get_s3_regions_request",
            "Ctmdb_remove_dbvendor_request",
            "Ctmdb_update_dbvendor_request",
            "Ctmdb_add_dbvendor_request",
            "Ctmcm_mft_get_b2b_mode_request",
            "Ctmcm_mft_b2b_rest_delete_request",
            "Ctmcm_mft_b2b_rest_read_request",
            "Ctmcm_mft_b2b_rest_update_request",
            "Ctmcm_mft_b2b_rest_create_request",
            "Ctmcm_mft_b2b_general_command_request",
            "Ctmpsft_recycle_request",
            "Ctmcm_get_Mvs_templates_request",
            "Ctmcm_delete_Mvs_template_request",
            "Ctmcm_add_Mvs_template_request",
            "Ctmcm_update_Mvs_template_request",
            "Ctmsap_update_sap_interception_profile_request",
            "Ctmsap_get_sap_interception_profiles_request",
            "Ctmcm_get_pgp_templates_request",
            "Ctmcm_delete_pgp_template_request",
            "Ctmcm_add_pgp_template_request",
            "Ctmcm_update_pgp_template_request",
            "Ctmcm_mass_update_details_request",
            "Ctmcm_create_ssh_key_request",
            "Ctmcm_authorize_remote_host_request",
            "Ctmcm_get_home_directory_request",
            "Ctmoebs_activate_ew_request",
            "Ctmoebs_get_alerts_list_request",
            "Ctmoebs_get_applications_list_request",
            "Ctmoebs_update_ew_rules_request",
            "Ctmoebs_get_ew_rules_request",
            "Ctmoebs_update_ew_config_request",
            "Ctmoebs_get_ew_config_request",
            "Ctmoebs_get_service_names_request",
            "Ctmcm_browse_file_request",
            "Ctmsap_clear_events_request",
            "Ctmsap_update_ew_rules_request",
            "Ctmsap_get_ew_rules_request",
            "Zos_get_sys_parms_request",
            "Update_deployment_target_request",
            "Update_deployment_parameters_request",
            "Get_deployment_output_request",
            "Retry_deployment_request",
            "Cancel_deployment_request",
            "Delete_deployment_request",
            "Add_uninstall_deployment_request",
            "Ctmsec_get_users_groups_request",
            "Ctmsec_delete_user_request",
            "Ctmsec_delete_group_request",
            "Ctmsec_update_user_request",
            "Ctmsec_update_group_request",
            "Ctmsec_new_user_request",
            "Ctmsec_new_group_request",
            "Ctmsec_get_security_attributes_request",
            "Ctmsec_update_security_attributes_request",
            "Ctmagent_add_request",
            "Ctmagent_delete_request",
            "Ctmagent_ping_request",
            "Ctmagent_get_parameters_request",
            "Ctmagent_set_parameters_request",
            "Ctmagent_enable_request",
            "Ctmagent_disable_request",
            "Get_ctms_debug_info_request",
            "Set_ctms_debug_info_request",
            "Ctmrjx_get_host_details_request",
            "Ctmrjx_add_host_request",
            "Ctmrjx_update_host_request",
            "Ctmrjx_delete_host_request",
            "Ctmrjx_test_host_request",
            "Ctmrjx_enable_host_request",
            "Ctmrjx_disable_host_request",
            "Ctmrjx_ping_host_request",
            "Ctmrjx_get_owners_request",
            "Ctmrjx_get_owner_details_request",
            "Ctmrjx_add_owner_request",
            "Ctmrjx_update_owner_request",
            "Ctmrjx_delete_owner_request",
            "Ctmrjx_get_keynames_list_request",
            "Ctmrjx_test_user_request",
            "Ctm_get_node_groups_request",
            "Ctm_update_node_group_request",
            "Ctm_add_node_group_request",
            "Ctm_delete_node_group_request",
            "Zos_ctl_request",
            "Zos_new_sys_parm_request",
            "Zos_update_sys_parm_request",
            "Zos_delete_sys_parm_request",
            "Zos_refresh_sys_parms_request",
            "Ctmnodeid_test_user_request",
            "Ctm_server_get_sys_parms_request",
            "Ctm_server_update_sys_parm_request",
            "Ctm_server_refresh_sys_parms_request",
            "Set_pause_request",
            "Zos_get_sys_parms_enhanced_request",
            "Ctmserver_get_ssh_keys_list_request",
            "Ctmserver_create_ssh_key_request",
            "Ctmserver_update_ssh_key_request",
            "Ctmserver_delete_ssh_key_request",
            "Ctmserver_get_public_key_request",
            "Get_supported_shout_destination_addresses_request",
            "Get_shout_destination_tables_request",
            "Delete_shout_destination_table_request",
            "Set_active_shout_destination_table_request",
            "Update_shout_destination_request",
            "Create_shout_destination_request",
            "Delete_shout_destination_request",
            "Ctm_get_all_node_restrictions_request",
            "Ctm_add_node_restriction_request",
            "Ctm_update_node_restriction_request",
            "Ctm_delete_node_restrictions_request",
            "Ctmsrv_get_cm_accounts_status_request",
            "Ctmsrv_update_cm_account_status_request",
            "Set_ctm_primary_request",
            "Set_ctm_failover_mode_request",
            "Replication_mode_request",
            "Ctmagent_troubleshooting_request",
            "Set_db_host_port_request",
            "Get_db_host_port_request",
            "Xalert_unhandle_request",
            "Create_em_component_request",
            "Get_component_request",
            "Refresh_ctms_ag_deploy_request",
            "Refresh_ctms_request",
            "Get_agents_request",
            "Xalert_handle_request",
            "Get_all_node_groups_request",
            "Get_components_request",
            "View_agents_log_request",
            "Get_xalerts_request",
            "Delete_sys_parms_request",
            "Update_sys_parms_request",
            "New_sys_parms_request",
            "Get_sys_parms_request",
            "Get_cms_details_request",
            "Get_ctms_codes_request",
            "Delete_ctms_request",
            "Ccp_add_or_update_request",
            "Ccp_get_summary_request",
            "Ccp_get_full_request",
            "Ccp_delete_request",
            "Ccp_get_sync_status_request",
            "Get_webserver_debuglevelinfo_request",
            "New_ctms_request",
            "Discover_request",
            "Get_ctms_details_request",
            "Un_manage_ctms_request",
            "Manage_ctms_request",
            "Disable_ctms_request",
            "Get_WebServer_urls_request",
            "Enable_ctms_request",
            "Rename_CTMServer_dry_run_request",
            "Get_db_details_request",
            "Get_em_details_request",
            "Move_em_control_request",
            "Set_webserver_debuglevelinfo_request",
            "Set_em_primary_request",
            "Start_replication_request",
            "Create_xalert_request",
            "Set_em_failover_mode_request",
            "Purge_xalerts_request",
            "Remove_old_versions_request",
            "Move_em_ctm_control_request",
            "Set_em_ctm_primary_request",
            "Get_capacity_exceed_alert_params_request",
            "Set_capacity_exceed_alert_params_request",
            "Test_envs_connectivity_request",
            "Set_enable_capacity_exceed_alert_request",
            "Get_enable_capacity_exceed_alert_request",
            "Get_license_site_info_request",
            "Get_license_info_request",
            "Update_license_request",
            "Get_web_server_details_request",
            "Get_available_client_updates_request",
            "Set_required_fp_or_patch_request",
            "Import_client_certificates_request",
            "Get_archive_server_conf_request",
            "Set_archive_server_conf_request",
            "Archive_Browse_CCM",
            "Archive_Update_CCM",
            "Set_B2B_mode_for_mft_request",
            "Promote_and_rename_CTMServer_request",
            "Get_compatibility_details_request",
            "Set_compatibility_version_request",
            "Update_local_CTMServer_attribute_request",
            "Update_ctms_request",
            "Ignore_request",
            "Recycle_request",
            "Stop_request",
            "Start_request",
            "Get_em_component_request",
            "Delete_em_component_request",
            "Remove_old_alerts_request",
            "Update_em_component_request",
            "List_em_user_names_request",
            "Get_diag_output_request",
            "Add_deployment_request",
            "Get_deployment_list_request",
            "Get_machine_details_request",
            "Get_packages_request",
            "Update_Add_Ons_request",
            "Get_Add_Ons_request",
            "LDAP_get_types_request",
            "Web_launch_prepare_package",
            "ManageSSL_generate_certificate_request",
            "ManageSSL_get_components_request",
            "ManageSSL_create_new_CA_request",
            "ManageSSL_get_CA_details_request",
            "Is_annotation_required_request",
            "Actions_auth_request",
            "Login_admin_db_request",
            "Db_extend_request",
            "Get_db_file_list_request",
            "Db_check_space_request",
            "Polling_request",
            "Ctl_request",
            "Xalert_update_note_request",
            "Ctmcm_mft_set_b2b_mode_request",
            "Get_ctm_node_groups_request"
          ],
          "description": "action name unique list of actions' names as appear in the actions_auth em db table, along with the destination makes a unique action auth entry"
        },
        "category": {
          "type": "string",
          "description": "Privilege (Can be empty) Possible Values for categories fields  - OPER, DATABASE, CONFIG, CTMSEC, CPMAN, RAMAN, AGMAN, CMMAN, CCP, UNKNOWN"
        },
        "authLevel": {
          "type": "string",
          "description": "required minimum authorization level - BROWSE, UPDATE, FULL"
        },
        "actionType": {
          "type": "string",
          "description": "R - request always pass, authorization is done on the response; C - Connection Profile name will remain empty and will be ignored; E - Not related to authorization"
        },
        "additionalInfo": {
          "type": "string",
          "description": "currently not in use regarding authorization"
        },
        "category2": {
          "type": "string"
        },
        "policy": {
          "type": "string",
          "enum": [
            "CTG",
            "CTG2",
            "CTG_AND_CTG2",
            "CTG_OR_CTG2"
          ],
          "description": "relation between Category and category2 - 1. Only category, 2.\tOnly Category2, 3. Category AND Category2, 4. Category OR Category2"
        },
        "authAttr": {
          "type": "string",
          "description": "In case that not all information for authorization exist in the header request, it contain path in the body for the missing field\\fields."
        }
      }
    },
    "EncryptionMetadata": {
      "type": "object",
      "properties": {
        "encryptionType": {
          "type": "string",
          "description": "The type of encryption algorithm to be used to de/encrypt the fields (AES256 or Blowfish)"
        },
        "fieldsToEncrypt": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of XML tag names identifying the fields to be de/encrypted in the request XML"
        }
      }
    },
    "RawCmsXmlRequest": {
      "type": "object",
      "properties": {
        "rawXmlRequest": {
          "type": "string",
          "description": "The raw XML request string"
        },
        "encryptionMetadata": {
          "$ref": "#/definitions/EncryptionMetadata"
        }
      }
    },
    "RoleData": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "role name"
        },
        "Description": {
          "type": "string",
          "description": "role description"
        },
        "OrganizationGroups": {
          "type": "array",
          "description": "organization groups",
          "items": {
            "type": "string"
          }
        },
        "OrganizationUsers": {
          "type": "array",
          "description": "organization usrs",
          "items": {
            "type": "string"
          }
        },
        "AllowedJobs": {
          "$ref": "#/definitions/AllowedJobs"
        },
        "AllowedJobActions": {
          "$ref": "#/definitions/AllowedJobActions"
        },
        "Privileges": {
          "$ref": "#/definitions/Privileges"
        },
        "Folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderAuth"
          }
        },
        "Calendars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "RunasUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunasUserAuth"
          }
        },
        "WorkloadPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeName"
          }
        },
        "SiteStandard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeName"
          }
        },
        "Secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeName"
          }
        },
        "SiteCustomization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeName"
          }
        },
        "Services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceAuth"
          }
        },
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "Mutexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "Locks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "Semaphores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "Pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "Variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeNameControlm"
          }
        },
        "GlobalEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivilegeName"
          }
        },
        "AgentManagement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentMngAuth"
          }
        },
        "PluginManagement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginMngAuth"
          }
        },
        "ConnectionProfileManagement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CPMngAuth"
          }
        },
        "RunasDefinitionManagement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunasDefinitionAuth"
          }
        }
      }
    },
    "RoleHeader": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "role name"
        },
        "description": {
          "type": "string",
          "description": "role description"
        }
      }
    },
    "RoleHeaderList": {
      "type": "array",
      "description": "List of all authorization roles",
      "items": {
        "$ref": "#/definitions/RoleHeader"
      }
    },
    "RoleDataFull": {
      "type": "object",
      "properties": {
        "Overwrite": {
          "type": "boolean",
          "description": "can overwrtie existing role"
        },
        "OrganizationGroups": {
          "type": "array",
          "description": "organization groups",
          "items": {
            "type": "string"
          }
        },
        "RoleData": {
          "$ref": "#/definitions/RoleData",
          "description": "authorization role"
        }
      }
    },
    "RunasDefinitionAuth": {
      "type": "object",
      "properties": {
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "Privilege": {
          "type": "string",
          "description": "access level (full, update, browse)"
        }
      }
    },
    "RunasUserAuth": {
      "type": "object",
      "properties": {
        "ControlmServer": {
          "type": "string",
          "description": "control-M server name"
        },
        "RunasUser": {
          "type": "string",
          "description": "runas user"
        },
        "Host": {
          "type": "string",
          "description": "HOst or host group value"
        }
      }
    },
    "RunAsUserData": {
      "type": "object",
      "properties": {
        "agent": {
          "type": "string",
          "description": "agent name, can ended by wildcard REQUIRED"
        },
        "user": {
          "type": "string",
          "description": "user name REQUIRED"
        },
        "password": {
          "type": "string",
          "description": "Password",
          "x-prompt": "Password VALIDATE"
        },
        "key": {
          "$ref": "#/definitions/RunAsUserKeyData",
          "description": "HIDDEN"
        }
      }
    },
    "RunAsUserDetailsData": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password",
          "x-prompt": "Password VALIDATE"
        },
        "key": {
          "$ref": "#/definitions/RunAsUserKeyData",
          "description": "HIDDEN"
        }
      }
    },
    "RunAsUserKeyData": {
      "type": "object",
      "properties": {
        "keyname": {
          "type": "string",
          "description": "ssh key"
        },
        "passphrase": {
          "type": "string",
          "description": "SSH key passphrase"
        }
      }
    },
    "RunAsUsersList": {
      "type": "array",
      "description": "List of all Run-as users.",
      "items": {
        "$ref": "#/definitions/RunAsUserData"
      }
    },
    "SecretKeyValue": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique key"
        },
        "value": {
          "type": "string",
          "description": "Any value in string form.",
          "x-prompt": "New secret value VALIDATE"
        }
      }
    },
    "SecretValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The parameter value",
          "x-prompt": "New secret value VALIDATE"
        }
      }
    },
    "ServiceAuth": {
      "type": "object",
      "properties": {
        "Privilege": {
          "type": "string",
          "description": "access level (Full, Update, Browse, None)"
        },
        "Name": {
          "type": "string",
          "description": "service name"
        },
        "AllowedActions": {
          "$ref": "#/definitions/ServiceAuthAction",
          "description": "active list"
        }
      }
    },
    "ServiceAuthAction": {
      "type": "object",
      "properties": {
        "DrillDown": {
          "type": "boolean",
          "description": "Is DrillDown allowed in service"
        },
        "Run": {
          "type": "boolean",
          "description": "Is Run allowed in service"
        },
        "Hold": {
          "type": "boolean",
          "description": "Is Hold allowed in service"
        },
        "Resume": {
          "type": "boolean",
          "description": "Is Resume allowed in service"
        },
        "ViewOrderableService": {
          "type": "boolean",
          "description": "Is View Orderable Service allowed in service"
        }
      }
    },
    "ToolsPrivilegeCategory": {
      "type": "object",
      "properties": {
        "Cli": {
          "type": "string",
          "description": "CLI access level (None, Browse, Update, Full)"
        },
        "BatchImpactManagerReport": {
          "type": "string",
          "description": "BIM Reports access level (None, Browse, Update, Full)"
        },
        "ForecastReport": {
          "type": "string",
          "description": "Forecast Reports access level (None, Browse, Update, Full)"
        },
        "ControlMReport": {
          "type": "string",
          "description": "Control-M Reports access level (None, Full)"
        },
        "SiteStandardPolicies": {
          "type": "string",
          "description": "Site Standard Policies access level (Browse, Update, Full)"
        }
      }
    },
    "SshKeyProperties": {
      "type": "object",
      "properties": {
        "keyName": {
          "description": "External user data REQUIRED",
          "type": "string"
        },
        "keyPassphrase": {
          "description": "SSH Key passphrase REQUIRED",
          "type": "string",
          "x-prompt": "Password VALIDATE"
        },
        "keySize": {
          "description": "SSH Key size (default 2048)",
          "default": 2048,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UserData": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "user name"
        },
        "Description": {
          "type": "string",
          "description": "user description"
        },
        "FullName": {
          "type": "string",
          "description": "full user name"
        },
        "Authentication": {
          "$ref": "#/definitions/AuthenticationData",
          "description": "user authentication"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Authorization": {
          "$ref": "#/definitions/RoleData"
        }
      }
    },
    "OrganizationGroupUserAuthorizationSimulationData": {
      "type": "object",
      "properties": {
        "UserData": {
          "$ref": "#/definitions/UserData",
          "description": "user authentication"
        },
        "OrganizationGroupsInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationGroupInfo"
          }
        }
      }
    },
    "OrganizationGroupInfo": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "description": "role name"
        },
        "organizationGroupsinEM": {
          "type": "array",
          "description": "organization groups in em",
          "items": {
            "type": "string"
          }
        },
        "memberInOrganizationGroup": {
          "type": "array",
          "description": "member in organization group",
          "items": {
            "$ref": "#/definitions/OrganizationGroupName"
          }
        }
      }
    },
    "OrganizationGroupName": {
      "type": "object",
      "properties": {
        "shortDomainName": {
          "type": "string",
          "description": "short domain name"
        },
        "longDomainName": {
          "type": "string",
          "description": "long domain name"
        }
      }
    },
    "OrganizationGroupExportData": {
      "type": "object",
      "properties": {
        "exportData": {
          "type": "string",
          "description": "short domain name"
        }
      }
    },
    "UserGroupPropertiesData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "user group name REQUIRED"
        },
        "externalUsers": {
          "type": "array",
          "description": "external users HIDDEN",
          "items": {
            "type": "string"
          }
        },
        "ldapGroups": {
          "type": "array",
          "description": "ldap groups HIDDEN",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserGroupDetailsData": {
      "type": "object",
      "properties": {
        "externalUsers": {
          "type": "array",
          "description": "external users HIDDEN",
          "items": {
            "type": "string"
          }
        },
        "ldapGroups": {
          "type": "array",
          "description": "ldap groups HIDDEN",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GatewayData": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "gateway host name REQUIRED"
        },
        "port": {
          "type": "string",
          "description": "gateway port REQUIRED"
        },
        "status": {
          "type": "string",
          "description": "gateway status HIDDEN"
        },
        "message": {
          "type": "string",
          "description": "general message HIDDEN"
        }
      }
    },
    "ComponentMftKeyType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "host": {
          "type": "string",
          "description": "host"
        },
        "nodeId": {
          "type": "string",
          "description": "node id"
        },
        "applType": {
          "type": "string",
          "description": "application type"
        },
        "applVer": {
          "type": "string",
          "description": "application version"
        },
        "cmVer": {
          "type": "string",
          "description": "cm version"
        }
      }
    },
    "MFTEntitiesListNames": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "virtualFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ComponentKeyWithStatusType": {
      "type": "object",
      "properties": {
        "componentKey": {
          "$ref": "#/definitions/ComponentMftKeyType",
          "description": "MFT component details"
        },
        "status": {
          "type": "integer",
          "description": "Component status"
        }
      }
    },
    "UserHeader": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "user name"
        },
        "fullName": {
          "type": "string",
          "description": "full user name"
        },
        "description": {
          "type": "string",
          "description": "user description"
        },
        "status": {
          "type": "string",
          "description": "user status (output only)"
        },
        "lastUpdated": {
          "type": "string",
          "description": "updated date (output only)"
        },
        "created": {
          "type": "string",
          "description": "create date (output only)"
        },
        "memberOf": {
          "type": "array",
          "description": "list of groups user belongs to",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserPassword": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "description": "new user password",
          "x-prompt": "New password VALIDATE"
        }
      }
    },
    "Value": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "The parameter value"
        }
      }
    },
    "OptionalValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The parameter value"
        }
      }
    },
    "ViewpointManagerPrivilegeCategory": {
      "type": "object",
      "properties": {
        "Collections": {
          "type": "string",
          "description": "Collections access level (None, Browse, Update, Full)"
        },
        "Hierarchies": {
          "type": "string",
          "description": "Hierarchies access level (None, Browse, Update, Full)"
        },
        "Filters": {
          "type": "string",
          "description": "Filters access level (None, Browse, Update, Full)"
        },
        "Viewpoints": {
          "type": "string",
          "description": "Viewpoints access level (None, Browse, Update, Full)"
        }
      }
    },
    "FoldersUsersSettingsAndMetadataPropertiesFromB2B": {
      "type": "object",
      "properties": {
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderProperties"
          }
        },
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingProperties"
          }
        },
        "settingsMetadata": {
          "$ref": "#/definitions/SettingsMetadataProperties"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAllowedFoldersProperties"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupsAllowedFoldersProperties"
          }
        }
      }
    },
    "FoldersUsersSettingsAndMetadataProperties": {
      "type": "object",
      "properties": {
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderPropertiesData"
          }
        },
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingProperties"
          }
        },
        "settingsMetadata": {
          "$ref": "#/definitions/SettingsMetadataProperties"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAllowedFoldersProperties"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupsAllowedFoldersProperties"
          }
        }
      }
    },
    "AllMFTDataSettings": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingProperties"
          }
        },
        "settingsMetadata": {
          "$ref": "#/definitions/SettingsMetadataProperties"
        }
      }
    },
    "SettingProperties": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "setting category property HIDDEN"
        },
        "name": {
          "type": "string",
          "description": "setting name property HIDDEN"
        },
        "value": {
          "type": "string",
          "description": "setting value property HIDDEN"
        }
      }
    },
    "SettingPropertiesObject": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingProperties"
          }
        }
      }
    },
    "SettingsMetadataProperties": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentMetaDataProperties"
          }
        },
        "error": {
          "type": "string"
        },
        "selectedComponentAfterActivation": {
          "type": "string"
        },
        "selectedComponentBeforeActivation": {
          "type": "string"
        }
      }
    },
    "ComponentMetaDataProperties": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "displayNameID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionMetadataProperties"
          }
        }
      }
    },
    "SectionMetadataProperties": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "displayName1": {
          "type": "string"
        },
        "displayNameID": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldMetadataProperties"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FieldMetadataProperties": {
      "type": "object",
      "properties": {
        "controlType": {
          "type": "string"
        },
        "dataType": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayNameID": {
          "type": "string"
        },
        "falseValue": {
          "type": "string"
        },
        "hashedPassword": {
          "type": "boolean"
        },
        "hideIf": {
          "$ref": "#/definitions/ConditionProperties"
        },
        "key": {
          "$ref": "#/definitions/SettingKeyProperties"
        },
        "name": {
          "type": "string"
        },
        "needRestart": {
          "type": "boolean"
        },
        "needRestartMessage": {
          "type": "string"
        },
        "needRestartMessageID": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "placeholderID": {
          "type": "string"
        },
        "possibleValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PossibleValueProperties"
          }
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "settingChangedEventTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "showIf": {
          "$ref": "#/definitions/ConditionProperties"
        },
        "tooltip": {
          "type": "string"
        },
        "tooltipID": {
          "type": "string"
        },
        "trueValue": {
          "type": "string"
        },
        "unitsLabel": {
          "type": "string"
        },
        "unitsLabelID": {
          "type": "string"
        },
        "validations": {
          "$ref": "#/definitions/ValidationProperties"
        },
        "operationLinkLabel": {
          "type": "string"
        },
        "currentLabel": {
          "type": "string"
        },
        "newLabel": {
          "type": "string"
        },
        "warningTitle": {
          "type": "string"
        },
        "warningMessage": {
          "type": "string"
        },
        "operationButtonLabel": {
          "type": "string"
        },
        "operationCancelButtonLabel": {
          "type": "string"
        },
        "operationDiscardLinkLabel": {
          "type": "string"
        }
      }
    },
    "ConditionProperties": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/SettingKeyProperties"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SettingKeyProperties": {
      "type": "object",
      "properties": {
        "settingCategory": {
          "type": "string"
        },
        "settingName": {
          "type": "string"
        }
      }
    },
    "PossibleValueProperties": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "labelID": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ValidationProperties": {
      "type": "object",
      "properties": {
        "max": {
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "type": "integer",
          "format": "int32"
        },
        "regexPattern": {
          "type": "string"
        },
        "regexPatternJava": {
          "type": "string"
        },
        "regexPatternJavaScript": {
          "type": "string"
        },
        "regexPatternNoMatchMessage": {
          "type": "string"
        },
        "regexPatternNoMatchMessageID": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "requiredIf": {
          "$ref": "#/definitions/ConditionProperties"
        }
      }
    },
    "UserAllowedFoldersProperties": {
      "type": "object",
      "properties": {
        "allowedFoldersNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "as2CertificateAlias": {
          "type": "string"
        },
        "as2Id": {
          "type": "string"
        },
        "as2PublicKeyCertificate": {
          "type": "string"
        },
        "as2TargetFolder": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "hashedPassword": {
          "type": "string"
        },
        "isLdapAuth": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "sshPublicKey": {
          "type": "string"
        },
        "isLocked": {
          "type": "boolean"
        },
        "lockReason": {
          "type": "string"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean"
        },
        "passwordNeverExpires": {
          "type": "boolean"
        },
        "lastSuccessfulLoginTime": {
          "type": "string"
        }
      }
    },
    "GroupsAllowedFoldersProperties": {
      "type": "object",
      "properties": {
        "allowedFoldersNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalUsers": {
          "type": "array",
          "description": "external users",
          "items": {
            "type": "string"
          }
        },
        "ldapGroups": {
          "type": "array",
          "description": "ldap groups",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FolderProperties": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the folder. REQUIRED:addMFTFolder,addMFTFolderForSite | HIDDEN",
          "type": "string"
        },
        "allowedInternalUserNames": {
          "description": "Authorized Internal Users. HIDDEN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedUserNames": {
          "description": "Authorized External Users And User Groups. HIDDEN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedGroupNames": {
          "description": "Array of allowed group names. HIDDEN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteFilesAfterProcessing": {
          "type": "boolean",
          "description": "Delete file after downloaded from incoming folder. HIDDEN"
        },
        "notifyByEmailWhenFileArrived": {
          "type": "boolean",
          "description": "Send email notification to external users when a new file arrives. HIDDEN"
        },
        "retentionHours": {
          "type": "integer",
          "format": "int64",
          "description": "Retention Time in hours. HIDDEN"
        },
        "sizeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Size limit for folder (in Gigabyte). HIDDEN"
        },
        "allowedFilePattern": {
          "type": "string",
          "description": "allowed file pattern wildcard. HIDDEN"
        },
        "excludeFilePattern": {
          "type": "string",
          "description": "blocked file pattern wildcard. HIDDEN"
        },
        "accessType": {
          "type": "string",
          "description": "Folder's access type (Limited, Unlimited). HIDDEN"
        }
      }
    },
    "SettingsUpdateObject": {
      "type": "object",
      "properties": {
        "SettingsObj": {
          "$ref": "#/definitions/SettingPropertiesObject",
          "description": "Settings Properties Object"
        },
        "CompKeyType": {
          "$ref": "#/definitions/ComponentMftKeyType",
          "description": "Component Mft key type"
        }
      }
    },
    "RuleProjection": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "searchTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchTagTuple"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "SearchTagTuple": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HubData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Hub state"
        },
        "syncStatus": {
          "type": "string",
          "description": "Hub sync status"
        },
        "name": {
          "type": "string",
          "description": "Agent name"
        },
        "cpu": {
          "type": "string",
          "description": "CPU"
        },
        "memory": {
          "type": "string",
          "description": "memory usage"
        },
        "message": {
          "type": "string",
          "description": "Hub Health Message"
        },
        "siteName": {
          "type": "string",
          "description": "Hub Site Name"
        }
      }
    },
    "ZooKeeper": {
      "type": "object",
      "properties": {
        "zookeeperId": {
          "type": "integer",
          "description": "zookeeper Id"
        },
        "zookeeperServerHost": {
          "type": "string",
          "description": "zookeeper Server Host"
        },
        "zookeeperAdminServerPort": {
          "type": "integer",
          "description": "zookeeper Admin Server Port"
        },
        "zookeeperClientPort": {
          "type": "integer",
          "description": "zookeeper Client Port"
        },
        "zookeeperLeaderPort": {
          "type": "integer",
          "description": "zookeeper Leader Port"
        },
        "zookeeperLeaderElectionPort": {
          "type": "integer",
          "description": "zookeeper Leader Election Port"
        }
      }
    },
    "AgentCertificateExpirationData": {
      "type": "object",
      "properties": {
        "expirationDate": {
          "type": "string",
          "description": "The Certificate expiration date"
        }
      }
    },
    "UserPreferences": {
      "type": "object",
      "properties": {
        "userPreferences": {
          "description": "The user preferences HIDDEN",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CTMNameValueSW"
          }
        }
      }
    },
    "CTMNameValueSW": {
      "type": "object",
      "properties": {
        "cTMAttrName": {
          "type": "string"
        },
        "cTMAttrValue": {
          "type": "string"
        }
      }
    },
    "AddOns": {
      "type": "object",
      "properties": {
        "addons": {
          "description": "list of AddOn's names and statuses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameStatus"
          }
        }
      }
    },
    "NameStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "CertificateSigningRequestData": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string",
          "description": "The organization HIDDEN"
        },
        "organizationUnit": {
          "type": "string",
          "description": "The organizationUnit HIDDEN"
        },
        "cityLocality": {
          "type": "string",
          "description": "The cityLocality HIDDEN"
        },
        "stateProvince": {
          "type": "string",
          "description": "The stateProvince HIDDEN"
        },
        "country": {
          "type": "string",
          "description": "The country HIDDEN"
        },
        "emailAddress": {
          "type": "string",
          "description": "The emailAddress HIDDEN"
        }
      }
    },
    "HubStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Hub status"
        }
      }
    },
    "EMSystemParameter": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "EM System parameter"
        }
      }
    },
    "SystemSetting": {
      "type": "object",
      "properties": {
        "saml2IdentityProvider": {
          "$ref": "#/definitions/Saml2IdentityProvider"
        },
        "ldapSettings": {
          "$ref": "#/definitions/SystemSettingLdap"
        },
        "newDayTime": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "firstDayOfTheWeek": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "siteInterfaceLanguage": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "environmentBannerColor": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "environmentTitle": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "environmentDescription": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "enforceSiteStandards": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "strictnesslevel": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "historyRetentionDays": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "privacyNoticeURL": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "enableExternalAlerts": {
          "$ref": "#/definitions/SystemSettingProperty"
        },
        "annotations": {
          "$ref": "#/definitions/SystemSettingAnnotationProperty"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorData"
          }
        }
      }
    },
    "SystemSettingLdap": {
      "type": "object",
      "required": [
        "ldapEnabled"
      ],
      "properties": {
        "ldapEnabled": {
          "type": "boolean"
        },
        "defaultDomain": {
          "type": "string"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LdapDomainSettings"
          }
        }
      }
    },
    "LdapDomainSettings": {
      "type": "object",
      "properties": {
        "domainName": {
          "type": "string"
        },
        "directorySearchUser": {
          "type": "string"
        },
        "directorySearchPassword": {
          "type": "string"
        },
        "communicationProtocol": {
          "type": "string"
        },
        "directoryServerType": {
          "type": "string"
        },
        "serverHostNameAndPort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostnamePortPair"
          }
        },
        "directorySearchBase": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Saml2IdentityProvider": {
      "type": "object",
      "required": [
        "metadataUrl",
        "enabled"
      ],
      "properties": {
        "metadataUrl": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "serviceProviderInformation": {
          "$ref": "#/definitions/ServiceProviderInformation"
        },
        "forceAuthentication": {
          "type": "boolean"
        }
      }
    },
    "ServiceProviderInformation": {
      "type": "object",
      "properties": {
        "singleSignOnUrl": {
          "type": "string"
        },
        "entityID": {
          "type": "string"
        },
        "signingCertificate": {
          "type": "string"
        },
        "ssoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ClusterAuthorizationData": {
      "type": "object",
      "properties": {
        "hostList": {
          "type": "array",
          "description": "hostnames and ports list HIDDEN",
          "items": {
            "$ref": "#/definitions/HostnamePortPair"
          }
        }
      }
    },
    "HostnamePortPair": {
      "type": "object",
      "properties": {
        "physicalHostname": {
          "type": "string",
          "description": "host name"
        },
        "port": {
          "type": "string",
          "description": "port"
        }
      }
    },
    "FtsSettingsData": {
      "type": "object",
      "description": "File Transfer Server (FTS) configuration data",
      "properties": {
        "generalSettings": {
          "description": "FTS general settings HIDDEN",
          "$ref": "#/definitions/FtsGeneralSettings"
        },
        "ftpSettings": {
          "description": "FTS FTP settings HIDDEN",
          "$ref": "#/definitions/FtsFtpSettings"
        },
        "sftpSettings": {
          "description": "FTS SFTP settings HIDDEN",
          "$ref": "#/definitions/FtsSftpSettings"
        },
        "authenticationDetails": {
          "description": "FTS authentication details HIDDEN",
          "$ref": "#/definitions/FtsAuthenticationDetails"
        }
      }
    },
    "FtsGeneralSettings": {
      "type": "object",
      "description": "File Transfer Server general parameters",
      "properties": {
        "homeDirectory": {
          "type": "string",
          "description": "Root path where transferred files are stored. If you want to use a different directory for each logged in user, you must add /${userName} to the path."
        },
        "multipleLoginAllowed": {
          "type": "boolean",
          "description": "Allow multiple open sessions"
        },
        "maxOpenSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent open sessions"
        },
        "maxLoginFailures": {
          "type": "integer",
          "format": "int32",
          "description": "Number of retries before the server closes the connection"
        },
        "delayAfterLoginFailure": {
          "type": "integer",
          "format": "int32",
          "description": "Time of waiting before letting the user to do another login in seconds"
        },
        "throttlingActivated": {
          "type": "boolean",
          "description": "Allow bandwidth throttling"
        },
        "maxSimultaneousUploads": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum simultaneos uploads"
        },
        "maxSimultaneousDownloads": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum simultaneos downloads"
        },
        "serverEnabled": {
          "type": "boolean",
          "description": "Enable/Disable the File Transfer Server"
        },
        "accessLogEnabled": {
          "type": "boolean",
          "description": "Is FTS Access Log enabled - true/false"
        }
      }
    },
    "FtsFtpSettings": {
      "type": "object",
      "description": "FTP/FTPS server parameters",
      "properties": {
        "serverEnabled": {
          "type": "boolean",
          "description": "Enable/Disable listening for FTP/S connection"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "FTP server port"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Authentication method being used to connect FTP server"
        },
        "secured": {
          "type": "boolean",
          "description": "Use FTP secure connection (SSL/TLS)"
        },
        "keystoreFilePath": {
          "type": "string",
          "description": "FTPS keystore file location"
        },
        "keystoreFilePassword": {
          "type": "string",
          "description": "Password being used to access the FTPS keystore"
        },
        "ciphers": {
          "type": "string",
          "description": "Ftps server allowed cipher suites (comma-separated). Leave empty to allow all supported cipher suites."
        },
        "listenForImplicitConnection": {
          "type": "boolean",
          "description": "Implicit negotiation mode - requires that the entire FTP session must be encrypted"
        },
        "passivePorts": {
          "type": "string",
          "description": "Passive FTP ports range - for PASV connections, the server will open a random port in this range for client to connect to"
        }
      }
    },
    "FtsSftpSettings": {
      "type": "object",
      "description": "SFTP server parameters",
      "properties": {
        "serverEnabled": {
          "type": "boolean",
          "description": "Enable/Disable listening for SFTP connection"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "SFTP server port"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Authentication method being used to connect FTP server"
        },
        "keystoreFilePath": {
          "type": "string",
          "description": "SFTP keystore file location"
        },
        "keystoreFilePassword": {
          "type": "string",
          "description": "Password being used to access the SFTP keystore"
        },
        "ciphers": {
          "type": "string",
          "description": "Ftps server allowed cipher suites (comma-separated). Leave empty to allow all supported cipher suites."
        },
        "knownUsersFilePath": {
          "type": "string",
          "description": "Known users file location"
        },
        "overriddenUsersHomeDirectories": {
          "description": "Overridden home directories for specific internal users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FtsUserHomeDirectoryData"
          }
        }
      }
    },
    "FtsUserHomeDirectoryData": {
      "type": "object",
      "description": "Home directory for specific user",
      "properties": {
        "userName": {
          "type": "string",
          "description": "User name"
        },
        "homeDirectory": {
          "type": "string",
          "description": "Home directory"
        }
      }
    },
    "FtsAuthenticationDetails": {
      "type": "object",
      "description": "File Transfer Server authentication parameters",
      "properties": {
        "allowedUsers": {
          "type": "string",
          "description": "Allowed Users (comma separated list, * wildcard is allowed)"
        },
        "blockedUsers": {
          "type": "string",
          "description": "Blocked Users (comma separated list, * wildcard is allowed)"
        },
        "ldapAuthenticationDetails": {
          "$ref": "#/definitions/FtsLdapAuthenticationDetails"
        },
        "pamAuthenticationDetails": {
          "$ref": "#/definitions/FtsPamAuthenticationDetails"
        }
      }
    },
    "FtsPamAuthenticationDetails": {
      "type": "object",
      "description": "File Transfer Server PAM authentication parameters",
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "Name of PAM service"
        }
      }
    },
    "FtsLdapAuthenticationDetails": {
      "type": "object",
      "description": "File Transfer Server LDAP authentication parameters",
      "properties": {
        "searchUserName": {
          "type": "string",
          "description": "Name of the user that runs the search action for users that log on"
        },
        "searchUserPassword": {
          "type": "string",
          "description": "Password of the user that runs the search action for users that log on"
        },
        "serverUrl": {
          "type": "string",
          "description": "URL of the LDAP Directory server"
        },
        "baseDn": {
          "type": "string",
          "description": "Base DN (the point from where the server will search for users)"
        },
        "usernameAttributeName": {
          "type": "string",
          "description": "Name of the LDAP attribute containing the username"
        },
        "dnAttributeName": {
          "type": "string",
          "description": "Name of the LDAP attribute containing the distinguished name"
        },
        "connectionTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "LDAP server connection timeout in milliseconds"
        }
      }
    },
    "AgentThingProperties": {
      "description": "the properties of the new Control-M Agent installed thing to be connected to SaaS Control-M",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the logical name to be used for new agent (equivilant to NodeId)"
        },
        "physicalName": {
          "type": "string",
          "description": "the physical name of the thing the agent is installed on"
        },
        "tag": {
          "type": "string",
          "description": "the agent tag to be associated with the new agent (CMS RBA permissions tag that is)"
        }
      }
    },
    "KnownHosts": {
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReadOnlyStatus": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "boolean",
          "description": "The status of readOnly"
        }
      }
    },
    "CtmagentBasicInfoType": {
      "type": "object",
      "properties": {
        "serverToAgentPortNumber": {
          "type": "integer",
          "description": "server to agent port number"
        },
        "agentToServerPortNumber": {
          "type": "integer",
          "description": "agent to server port number"
        },
        "persistentConnection": {
          "type": "string",
          "description": "is Server-Agent connection transient or perssistent"
        },
        "tcpsslServerMode": {
          "type": "string",
          "description": "is connection TCP or SSL"
        },
        "protocolVersion": {
          "type": "string",
          "description": "communication protocol version of the Server-Agent"
        },
        "agentStatus": {
          "type": "string",
          "description": "the Agent's status message"
        },
        "ipAddressesList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CtmagentCtmTestType": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "the test title"
        },
        "result": {
          "type": "string",
          "description": "the test result"
        },
        "message": {
          "type": "string",
          "description": "the test message"
        },
        "userAction": {
          "type": "string",
          "description": "the action user initiated"
        },
        "command": {
          "type": "string",
          "description": "the test's command"
        },
        "commandOutput": {
          "type": "string",
          "description": "the command's output"
        },
        "advanced": {
          "type": "integer",
          "description": "the test advanced option"
        },
        "ordinal": {
          "type": "integer",
          "description": "the test oridnal"
        }
      }
    },
    "CtmagentStateChangedType": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "the Agent state change timestamp"
        },
        "status": {
          "type": "string",
          "description": "the Agent state change status"
        },
        "message": {
          "type": "string",
          "description": "the Agent state change message"
        },
        "ordinal": {
          "type": "integer",
          "description": "the state change ordinal"
        }
      }
    },
    "Query": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "WorkflowInsightsStatus": {
      "type": "object",
      "properties": {
        "topology": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topology"
          }
        },
        "systemParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemParameter"
          }
        }
      }
    },
    "SystemParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "System parameter name"
        },
        "value": {
          "type": "string",
          "description": "System parameter value"
        },
        "type": {
          "type": "string",
          "description": "System parameter type"
        }
      }
    },
    "Topology": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        }
      }
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "availability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Availability"
          }
        },
        "performance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Performance"
          }
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Node Name"
        },
        "id": {
          "type": "string",
          "description": "A unique id of the node"
        },
        "role": {
          "type": "string",
          "description": "The role of the node"
        },
        "host": {
          "type": "string",
          "description": "The Host running the node"
        },
        "availability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Availability"
          }
        },
        "performance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Performance"
          }
        }
      }
    },
    "Availability": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "the type of the availability stat"
        },
        "name": {
          "type": "string",
          "description": "the name of the stat"
        },
        "status": {
          "type": "string",
          "description": "the current status"
        },
        "message": {
          "type": "string",
          "description": "A message representing the problem"
        },
        "key": {
          "type": "string",
          "description": "A unique key for the metric"
        }
      }
    },
    "Performance": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "the type of the availability metric"
        },
        "name": {
          "type": "string",
          "description": "the name of the metric"
        },
        "unit": {
          "type": "string",
          "description": "the unit of measurement"
        },
        "value": {
          "type": "string",
          "description": "the value of the metric"
        },
        "key": {
          "type": "string",
          "description": "A unique key for the metric"
        }
      }
    },
    "DiagnosticsDataCollectionInformation": {
      "type": "object",
      "properties": {
        "usageMeasurements": {
          "type": "boolean",
          "description": "Collect usage measurements HIDDEN"
        },
        "logsAndConfiguration": {
          "type": "boolean",
          "description": "Collect logs and configuration HIDDEN"
        },
        "days": {
          "type": "integer",
          "description": "Number of days HIDDEN"
        },
        "saveTo": {
          "type": "string",
          "description": "Save to location HIDDEN"
        },
        "cmdParams": {
          "type": "string",
          "description": "The command line parameters HIDDEN"
        }
      }
    },
    "DiagnosticsDataCollectionResult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The message"
        },
        "returnCode": {
          "type": "integer",
          "description": "The return code"
        }
      }
    },
    "CommunicationAnalysisResponseType": {
      "type": "object",
      "properties": {
        "basicInfo": {
          "$ref": "#/definitions/CtmagentBasicInfoType",
          "description": "The basic information pat of the report"
        },
        "ctmagentCtmTestsType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmagentCtmTestType"
          },
          "description": "The list of 4 tests executed and their output"
        },
        "ctmagentStatesChangedType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtmagentStateChangedType"
          },
          "description": "The list of 10 latest Agent's state changed to Unavailable and timestamp"
        }
      }
    },
    "RoleProperties": {
      "type": "object",
      "properties": {
        "newRoleName": {
          "type": "string",
          "description": "A new authorization role name REQUIRED"
        }
      }
    },
    "WorkspaceFolders": {
      "type": "object",
      "description": "Object containing Folders for workspace",
      "properties": {
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkspaceFolder"
          }
        }
      }
    },
    "WorkspaceFolder": {
      "type": "object",
      "properties": {
        "folderData": {
          "type": "string",
          "format": "byte"
        },
        "jobsData": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "AuthenticateCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "sessiontoken": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "additionalAttributes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "attrname": {
                "type": "string"
              },
              "attrvalue": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "AlertsStreamStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "OK",
            "WARNING",
            "ERROR",
            "UNAVAILABLE"
          ]
        },
        "message": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        }
      }
    },
    "AlertsStreamTemplate": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "backwardCompatibilityFields": {
          "type": "boolean"
        }
      }
    }
  },
  "swagger": "2.0"
}